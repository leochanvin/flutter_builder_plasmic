// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicPropertiesAppearanceSection,
  DefaultPropertiesAppearanceSectionProps
} from "./plasmic/flutter_builder/PlasmicPropertiesAppearanceSection";
import { HTMLElementRefOf } from "@plasmicapp/react-web";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface PropertiesAppearanceSectionProps extends Omit<DefaultPropertiesAppearanceSectionProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultPropertiesAppearanceSectionProps altogether and have
// total control over the props for your component.
export interface PropertiesAppearanceSectionProps
  extends DefaultPropertiesAppearanceSectionProps {
  node?: any;
  onUpdate?: (newProps: any) => void;
}

function PropertiesAppearanceSection_(
  props: PropertiesAppearanceSectionProps,
  ref: HTMLElementRefOf<"div">
) {
  const { node, onUpdate, ...rest } = props;
  
  // Extraire les propriétés d'apparence du nœud
  const containerProps = node?.props?.containerProps;
  const textProps = node?.props?.textProps;

  const handleContainerPropsChange = (newContainerProps: any) => {
    if (onUpdate && containerProps) {
      onUpdate({ containerProps: { ...containerProps, ...newContainerProps } });
    }
  };

  const handleTextPropsChange = (newTextProps: any) => {
    if (onUpdate && textProps) {
      onUpdate({ textProps: { ...textProps, ...newTextProps } });
    }
  };

  const handleBorderRadiusChange = (side: 'tl' | 'tr' | 'br' | 'bl', value: number) => {
    if (onUpdate && containerProps) {
      onUpdate({
        containerProps: {
          ...containerProps,
          borderRadius: {
            ...containerProps.borderRadius,
            [side]: value
          }
        }
      });
    }
  };

  const handleBorderWidthChange = (value: number) => {
    if (onUpdate && containerProps) {
      onUpdate({
        containerProps: { ...containerProps, borderWidth: value }
      });
    }
  };

  const handleElevationChange = (value: number) => {
    if (onUpdate && containerProps) {
      onUpdate({
        containerProps: { ...containerProps, elevation: value }
      });
    }
  };

  return (
    <PlasmicPropertiesAppearanceSection 
      frame149={{ ref }} 
      {...rest}
      overrides={{
        // Vous pouvez ajouter des overrides ici pour connecter les contrôles
        // aux gestionnaires d'événements
      }}
    />
  );
}

const PropertiesAppearanceSection = React.forwardRef(
  PropertiesAppearanceSection_
);
export default PropertiesAppearanceSection;
