/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 14Poat1Xo2MFaa35ZoCnqd
// Component: iS68sQYkDEs4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: fNeSTvGFB_H6/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectcss
import sty from "./PlasmicPropertiesTextfield.module.css"; // plasmic-import: iS68sQYkDEs4/css

import Frame64Icon from "./icons/PlasmicIcon__Frame64"; // plasmic-import: MjC4t4GUpoMA/icon
import Setting4Icon from "./icons/PlasmicIcon__Setting4"; // plasmic-import: ilzEL35aXFs0/icon

createPlasmicElementProxy;

export type PlasmicPropertiesTextfield__VariantMembers = {
  withoutIcon: "withoutIcon";
  boolean: "boolean";
};
export type PlasmicPropertiesTextfield__VariantsArgs = {
  withoutIcon?: SingleBooleanChoiceArg<"withoutIcon">;
  boolean?: SingleBooleanChoiceArg<"boolean">;
};
type VariantPropType = keyof PlasmicPropertiesTextfield__VariantsArgs;
export const PlasmicPropertiesTextfield__VariantProps =
  new Array<VariantPropType>("withoutIcon", "boolean");

export type PlasmicPropertiesTextfield__ArgsType = {
  children?: React.ReactNode;
  value?: string;
  onValueChangeAction?: (value: string) => void;
  boolean2?: boolean;
};
type ArgPropType = keyof PlasmicPropertiesTextfield__ArgsType;
export const PlasmicPropertiesTextfield__ArgProps = new Array<ArgPropType>(
  "children",
  "value",
  "onValueChangeAction",
  "boolean2"
);

export type PlasmicPropertiesTextfield__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  textfieldInput?: Flex__<typeof TextInput>;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultPropertiesTextfieldProps {
  children?: React.ReactNode;
  value?: string;
  onValueChangeAction?: (value: string) => void;
  boolean2?: boolean;
  withoutIcon?: SingleBooleanChoiceArg<"withoutIcon">;
  boolean?: SingleBooleanChoiceArg<"boolean">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPropertiesTextfield__RenderFunc(props: {
  variants: PlasmicPropertiesTextfield__VariantsArgs;
  args: PlasmicPropertiesTextfield__ArgsType;
  overrides: PlasmicPropertiesTextfield__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          boolean2: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textfieldInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "withoutIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withoutIcon
      },
      {
        path: "boolean",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.boolean
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootboolean]: hasVariant($state, "boolean", "boolean"),
          [sty.rootwithoutIcon]: hasVariant(
            $state,
            "withoutIcon",
            "withoutIcon"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxboolean]: hasVariant($state, "boolean", "boolean"),
          [sty.freeBoxwithoutIcon]: hasVariant(
            $state,
            "withoutIcon",
            "withoutIcon"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <Frame64Icon
              className={classNames(projectcss.all, sty.svg__vezhU)}
              role={"img"}
            />
          ),

          value: args.children
        })}
      </div>
      <TextInput
        data-plasmic-name={"textfieldInput"}
        data-plasmic-override={overrides.textfieldInput}
        className={classNames("__wab_instance", sty.textfieldInput, {
          [sty.textfieldInputboolean]: hasVariant($state, "boolean", "boolean"),
          [sty.textfieldInputwithoutIcon]: hasVariant(
            $state,
            "withoutIcon",
            "withoutIcon"
          )
        })}
        inputMode={"numeric"}
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["textfieldInput", "value"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["runOnValueChangeAction"] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["onValueChangeAction"],
                    args: [
                      (() => {
                        try {
                          return $state.textfieldInput.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runOnValueChangeAction"] != null &&
              typeof $steps["runOnValueChangeAction"] === "object" &&
              typeof $steps["runOnValueChangeAction"].then === "function"
            ) {
              $steps["runOnValueChangeAction"] = await $steps[
                "runOnValueChangeAction"
              ];
            }
          }).apply(null, eventArgs);
        }}
        placeholder={"0"}
        property={true}
        value={generateStateValueProp($state, ["textfieldInput", "value"])}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textboolean]: hasVariant($state, "boolean", "boolean")
        })}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.boolean2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "True";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Setting4Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgboolean]: hasVariant($state, "boolean", "boolean"),
          [sty.svgwithoutIcon]: hasVariant($state, "withoutIcon", "withoutIcon")
        })}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "textfieldInput", "text", "svg"],
  freeBox: ["freeBox"],
  textfieldInput: ["textfieldInput"],
  text: ["text"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  textfieldInput: typeof TextInput;
  text: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPropertiesTextfield__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPropertiesTextfield__VariantsArgs;
    args?: PlasmicPropertiesTextfield__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPropertiesTextfield__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPropertiesTextfield__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPropertiesTextfield__ArgProps,
          internalVariantPropNames: PlasmicPropertiesTextfield__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPropertiesTextfield__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPropertiesTextfield";
  } else {
    func.displayName = `PlasmicPropertiesTextfield.${nodeName}`;
  }
  return func;
}

export const PlasmicPropertiesTextfield = Object.assign(
  // Top-level PlasmicPropertiesTextfield renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    textfieldInput: makeNodeComponent("textfieldInput"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicPropertiesTextfield
    internalVariantProps: PlasmicPropertiesTextfield__VariantProps,
    internalArgProps: PlasmicPropertiesTextfield__ArgProps
  }
);

export default PlasmicPropertiesTextfield;
/* prettier-ignore-end */
