/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 14Poat1Xo2MFaa35ZoCnqd
// Component: 6pPyMMH9n6vH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PopUpAddWidget from "../../PopUpAddWidget"; // plasmic-import: bklbrvjs8_3B/component
import AddWidgetSelection from "../../AddWidgetSelection"; // plasmic-import: pvtNa1_sMQiD/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectcss
import sty from "./PlasmicLayerItem.module.css"; // plasmic-import: 6pPyMMH9n6vH/css

import RowVerticalIcon from "./icons/PlasmicIcon__RowVertical"; // plasmic-import: L56iOpBPHWm3/icon
import Plus1512SvgrepoComSvgIcon from "./icons/PlasmicIcon__Plus1512SvgrepoComSvg"; // plasmic-import: fu4dAXU-Gy_l/icon

createPlasmicElementProxy;

export type PlasmicLayerItem__VariantMembers = {};
export type PlasmicLayerItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayerItem__VariantsArgs;
export const PlasmicLayerItem__VariantProps = new Array<VariantPropType>();

export type PlasmicLayerItem__ArgsType = {
  data?: any;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicLayerItem__ArgsType;
export const PlasmicLayerItem__ArgProps = new Array<ArgPropType>(
  "data",
  "children"
);

export type PlasmicLayerItem__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  popUpAddWidget?: Flex__<typeof PopUpAddWidget>;
};

export interface DefaultLayerItemProps {
  data?: any;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLayerItem__RenderFunc(props: {
  variants: PlasmicLayerItem__VariantsArgs;
  args: PlasmicLayerItem__ArgsType;
  overrides: PlasmicLayerItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popUpAddWidget.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isExpanded",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wzL2)}>
        <div className={classNames(projectcss.all, sty.freeBox___5CIjy)}>
          <div className={classNames(projectcss.all, sty.freeBox__nJe6)}>
            {renderPlasmicSlot({
              defaultContents: (
                <RowVerticalIcon
                  className={classNames(projectcss.all, sty.svg__m00Lc)}
                  role={"img"}
                />
              ),

              value: args.children
            })}
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.data.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Column";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <PopUpAddWidget
              data-plasmic-name={"popUpAddWidget"}
              data-plasmic-override={overrides.popUpAddWidget}
              className={classNames("__wab_instance", sty.popUpAddWidget)}
              isOpen={generateStateValueProp($state, [
                "popUpAddWidget",
                "isOpen"
              ])}
              offset={28}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "popUpAddWidget",
                  "isOpen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placement={"right"}
              shouldFlip={true}
              showArrow={true}
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "popUpAddWidget"],
  text: ["text"],
  popUpAddWidget: ["popUpAddWidget"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  popUpAddWidget: typeof PopUpAddWidget;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayerItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayerItem__VariantsArgs;
    args?: PlasmicLayerItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayerItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLayerItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLayerItem__ArgProps,
          internalVariantPropNames: PlasmicLayerItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLayerItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLayerItem";
  } else {
    func.displayName = `PlasmicLayerItem.${nodeName}`;
  }
  return func;
}

export const PlasmicLayerItem = Object.assign(
  // Top-level PlasmicLayerItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    popUpAddWidget: makeNodeComponent("popUpAddWidget"),

    // Metadata about props expected for PlasmicLayerItem
    internalVariantProps: PlasmicLayerItem__VariantProps,
    internalArgProps: PlasmicLayerItem__ArgProps
  }
);

export default PlasmicLayerItem;
/* prettier-ignore-end */
