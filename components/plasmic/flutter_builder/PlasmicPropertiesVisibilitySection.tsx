/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 14Poat1Xo2MFaa35ZoCnqd
// Component: BIrfUEblpERf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PropertiesTextfield from "../../PropertiesTextfield"; // plasmic-import: iS68sQYkDEs4/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectcss
import sty from "./PlasmicPropertiesVisibilitySection.module.css"; // plasmic-import: BIrfUEblpERf/css

import EyeIcon from "./icons/PlasmicIcon__Eye"; // plasmic-import: sXEne5pTMqPk/icon
import Frame64Icon from "./icons/PlasmicIcon__Frame64"; // plasmic-import: MjC4t4GUpoMA/icon
import MobileSvgIcon from "./icons/PlasmicIcon__MobileSvg"; // plasmic-import: y0k2igmDYeFW/icon
import Frame221SvgIcon from "./icons/PlasmicIcon__Frame221Svg"; // plasmic-import: iT8vlM7V2mle/icon
import Frame222SvgIcon from "./icons/PlasmicIcon__Frame222Svg"; // plasmic-import: FXXChlI1PXSV/icon
import MonitorSvgIcon from "./icons/PlasmicIcon__MonitorSvg"; // plasmic-import: pgl_3bThkRoN/icon

createPlasmicElementProxy;

export type PlasmicPropertiesVisibilitySection__VariantMembers = {};
export type PlasmicPropertiesVisibilitySection__VariantsArgs = {};
type VariantPropType = keyof PlasmicPropertiesVisibilitySection__VariantsArgs;
export const PlasmicPropertiesVisibilitySection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPropertiesVisibilitySection__ArgsType = {};
type ArgPropType = keyof PlasmicPropertiesVisibilitySection__ArgsType;
export const PlasmicPropertiesVisibilitySection__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPropertiesVisibilitySection__OverridesType = {
  frame146?: Flex__<"div">;
  frame59?: Flex__<"div">;
  frame56?: Flex__<"div">;
  frame58?: Flex__<"div">;
  rectangle11?: Flex__<"div">;
};

export interface DefaultPropertiesVisibilitySectionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPropertiesVisibilitySection__RenderFunc(props: {
  variants: PlasmicPropertiesVisibilitySection__VariantsArgs;
  args: PlasmicPropertiesVisibilitySection__ArgsType;
  overrides: PlasmicPropertiesVisibilitySection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame146"}
      data-plasmic-override={overrides.frame146}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame146
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jbwe2)}>
        <div
          data-plasmic-name={"frame59"}
          data-plasmic-override={overrides.frame59}
          className={classNames(projectcss.all, sty.frame59)}
        >
          <div
            data-plasmic-name={"frame56"}
            data-plasmic-override={overrides.frame56}
            className={classNames(projectcss.all, sty.frame56)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gAtx
              )}
            >
              {"Visibility"}
            </div>
            <PropertiesTextfield
              className={classNames(
                "__wab_instance",
                sty.propertiesTextfield__imbNk
              )}
            >
              <EyeIcon
                className={classNames(projectcss.all, sty.svg__euxnm)}
                role={"img"}
              />
            </PropertiesTextfield>
          </div>
          <div
            data-plasmic-name={"frame58"}
            data-plasmic-override={overrides.frame58}
            className={classNames(projectcss.all, sty.frame58)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pS1Q2
              )}
            >
              {"Opacity"}
            </div>
            <PropertiesTextfield
              className={classNames(
                "__wab_instance",
                sty.propertiesTextfield__xFcug
              )}
            >
              <Frame64Icon
                className={classNames(projectcss.all, sty.svg__lspPj)}
                role={"img"}
              />
            </PropertiesTextfield>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__ykwVd)}>
          <MobileSvgIcon
            className={classNames(projectcss.all, sty.svg__tta90)}
            role={"img"}
          />

          <Frame221SvgIcon
            className={classNames(projectcss.all, sty.svg__x4Te2)}
            role={"img"}
          />

          <Frame222SvgIcon
            className={classNames(projectcss.all, sty.svg___0Ntha)}
            role={"img"}
          />

          <MonitorSvgIcon
            className={classNames(projectcss.all, sty.svg__byqF)}
            role={"img"}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"rectangle11"}
        data-plasmic-override={overrides.rectangle11}
        className={classNames(projectcss.all, sty.rectangle11)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame146: ["frame146", "frame59", "frame56", "frame58", "rectangle11"],
  frame59: ["frame59", "frame56", "frame58"],
  frame56: ["frame56"],
  frame58: ["frame58"],
  rectangle11: ["rectangle11"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame146: "div";
  frame59: "div";
  frame56: "div";
  frame58: "div";
  rectangle11: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPropertiesVisibilitySection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPropertiesVisibilitySection__VariantsArgs;
    args?: PlasmicPropertiesVisibilitySection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicPropertiesVisibilitySection__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicPropertiesVisibilitySection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPropertiesVisibilitySection__ArgProps,
          internalVariantPropNames:
            PlasmicPropertiesVisibilitySection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPropertiesVisibilitySection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame146") {
    func.displayName = "PlasmicPropertiesVisibilitySection";
  } else {
    func.displayName = `PlasmicPropertiesVisibilitySection.${nodeName}`;
  }
  return func;
}

export const PlasmicPropertiesVisibilitySection = Object.assign(
  // Top-level PlasmicPropertiesVisibilitySection renders the root element
  makeNodeComponent("frame146"),
  {
    // Helper components rendering sub-elements
    frame59: makeNodeComponent("frame59"),
    frame56: makeNodeComponent("frame56"),
    frame58: makeNodeComponent("frame58"),
    rectangle11: makeNodeComponent("rectangle11"),

    // Metadata about props expected for PlasmicPropertiesVisibilitySection
    internalVariantProps: PlasmicPropertiesVisibilitySection__VariantProps,
    internalArgProps: PlasmicPropertiesVisibilitySection__ArgProps
  }
);

export default PlasmicPropertiesVisibilitySection;
/* prettier-ignore-end */
