/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 14Poat1Xo2MFaa35ZoCnqd
// Component: J20s0U7K-z1T

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: fNeSTvGFB_H6/component
import PropertiesTextfield from "../../PropertiesTextfield"; // plasmic-import: iS68sQYkDEs4/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectcss
import sty from "./PlasmicPropertiesAppearanceSection.module.css"; // plasmic-import: J20s0U7K-z1T/css

import InfoCircleIcon from "./icons/PlasmicIcon__InfoCircle"; // plasmic-import: 1xGEf6lNVKha/icon
import Frame65Icon from "./icons/PlasmicIcon__Frame65"; // plasmic-import: mul6QsWkCRDG/icon
import Frame66Icon from "./icons/PlasmicIcon__Frame66"; // plasmic-import: 5HoE_D7oIRV0/icon

createPlasmicElementProxy;

export type PlasmicPropertiesAppearanceSection__VariantMembers = {};
export type PlasmicPropertiesAppearanceSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicPropertiesAppearanceSection__VariantsArgs;
export const PlasmicPropertiesAppearanceSection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPropertiesAppearanceSection__ArgsType = {};
type ArgPropType = keyof PlasmicPropertiesAppearanceSection__ArgsType;
export const PlasmicPropertiesAppearanceSection__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPropertiesAppearanceSection__OverridesType = {
  frame149?: Flex__<"div">;
  frame94?: Flex__<"div">;
  frame95?: Flex__<"div">;
  infoCircle2?: Flex__<"div">;
  vuesaxOutlineInfoCircle2?: Flex__<"div">;
  frame96?: Flex__<"div">;
  frame105?: Flex__<"div">;
  frame97?: Flex__<"div">;
  frame104?: Flex__<"div">;
  textInput6?: Flex__<typeof TextInput>;
  frame98?: Flex__<"div">;
  frame99?: Flex__<"div">;
  frame100?: Flex__<"div">;
  textInput5?: Flex__<typeof TextInput>;
  frame101?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  frame102?: Flex__<"div">;
  frame103?: Flex__<"div">;
  textInput4?: Flex__<typeof TextInput>;
  frame108?: Flex__<"div">;
  textInput3?: Flex__<typeof TextInput>;
  frame109?: Flex__<"div">;
  frame110?: Flex__<"div">;
  rectangle7?: Flex__<"div">;
  frame114?: Flex__<"div">;
  rectangle9?: Flex__<"div">;
  rectangle6?: Flex__<"div">;
};

export interface DefaultPropertiesAppearanceSectionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPropertiesAppearanceSection__RenderFunc(props: {
  variants: PlasmicPropertiesAppearanceSection__VariantsArgs;
  args: PlasmicPropertiesAppearanceSection__ArgsType;
  overrides: PlasmicPropertiesAppearanceSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame149"}
      data-plasmic-override={overrides.frame149}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame149
      )}
    >
      <div
        data-plasmic-name={"frame94"}
        data-plasmic-override={overrides.frame94}
        className={classNames(projectcss.all, sty.frame94)}
      >
        <div
          data-plasmic-name={"frame95"}
          data-plasmic-override={overrides.frame95}
          className={classNames(projectcss.all, sty.frame95)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1NWlv
            )}
          >
            {"Appearance"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zmrjX)}>
            <div
              data-plasmic-name={"infoCircle2"}
              data-plasmic-override={overrides.infoCircle2}
              className={classNames(projectcss.all, sty.infoCircle2)}
            >
              <div
                data-plasmic-name={"vuesaxOutlineInfoCircle2"}
                data-plasmic-override={overrides.vuesaxOutlineInfoCircle2}
                className={classNames(
                  projectcss.all,
                  sty.vuesaxOutlineInfoCircle2
                )}
              >
                <InfoCircleIcon
                  className={classNames(projectcss.all, sty.svg__inM5L)}
                  role={"img"}
                />
              </div>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"frame96"}
          data-plasmic-override={overrides.frame96}
          className={classNames(projectcss.all, sty.frame96)}
        >
          <div
            data-plasmic-name={"frame105"}
            data-plasmic-override={overrides.frame105}
            className={classNames(projectcss.all, sty.frame105)}
          >
            <div
              data-plasmic-name={"frame97"}
              data-plasmic-override={overrides.frame97}
              className={classNames(projectcss.all, sty.frame97)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k06Ve
                )}
              >
                {"Radius"}
              </div>
              <div
                data-plasmic-name={"frame104"}
                data-plasmic-override={overrides.frame104}
                className={classNames(projectcss.all, sty.frame104)}
              >
                <TextInput
                  data-plasmic-name={"textInput6"}
                  data-plasmic-override={overrides.textInput6}
                  className={classNames("__wab_instance", sty.textInput6)}
                  inputMode={"numeric"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "textInput6",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={"0"}
                  property={true}
                  radius={true}
                  value={generateStateValueProp($state, [
                    "textInput6",
                    "value"
                  ])}
                />

                <div
                  data-plasmic-name={"frame98"}
                  data-plasmic-override={overrides.frame98}
                  className={classNames(projectcss.all, sty.frame98)}
                >
                  <div
                    data-plasmic-name={"frame99"}
                    data-plasmic-override={overrides.frame99}
                    className={classNames(projectcss.all, sty.frame99)}
                  >
                    <div
                      data-plasmic-name={"frame100"}
                      data-plasmic-override={overrides.frame100}
                      className={classNames(projectcss.all, sty.frame100)}
                    >
                      <TextInput
                        data-plasmic-name={"textInput5"}
                        data-plasmic-override={overrides.textInput5}
                        className={classNames("__wab_instance", sty.textInput5)}
                        inputMode={"numeric"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "textInput5",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={"0"}
                        property={true}
                        radius={true}
                        value={generateStateValueProp($state, [
                          "textInput5",
                          "value"
                        ])}
                      />

                      <Frame65Icon
                        className={classNames(projectcss.all, sty.svg__gSygV)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"frame101"}
                      data-plasmic-override={overrides.frame101}
                      className={classNames(projectcss.all, sty.frame101)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zuhHn
                        )}
                      >
                        <Frame65Icon
                          className={classNames(projectcss.all, sty.svg__nhEBd)}
                          role={"img"}
                        />
                      </div>
                      <TextInput
                        data-plasmic-name={"textInput2"}
                        data-plasmic-override={overrides.textInput2}
                        className={classNames("__wab_instance", sty.textInput2)}
                        inputMode={"numeric"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "textInput2",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={"0"}
                        property={true}
                        radius={true}
                        value={generateStateValueProp($state, [
                          "textInput2",
                          "value"
                        ])}
                      />
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame102"}
                    data-plasmic-override={overrides.frame102}
                    className={classNames(projectcss.all, sty.frame102)}
                  >
                    <div
                      data-plasmic-name={"frame103"}
                      data-plasmic-override={overrides.frame103}
                      className={classNames(projectcss.all, sty.frame103)}
                    >
                      <TextInput
                        data-plasmic-name={"textInput4"}
                        data-plasmic-override={overrides.textInput4}
                        className={classNames("__wab_instance", sty.textInput4)}
                        inputMode={"numeric"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "textInput4",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={"0"}
                        property={true}
                        radius={true}
                        value={generateStateValueProp($state, [
                          "textInput4",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__msvdp
                        )}
                      >
                        <Frame65Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2PNaP
                          )}
                          role={"img"}
                        />
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame108"}
                      data-plasmic-override={overrides.frame108}
                      className={classNames(projectcss.all, sty.frame108)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dJySy
                        )}
                      >
                        <Frame65Icon
                          className={classNames(projectcss.all, sty.svg__mWXjt)}
                          role={"img"}
                        />
                      </div>
                      <TextInput
                        data-plasmic-name={"textInput3"}
                        data-plasmic-override={overrides.textInput3}
                        className={classNames("__wab_instance", sty.textInput3)}
                        inputMode={"numeric"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "textInput3",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={"0"}
                        property={true}
                        radius={true}
                        value={generateStateValueProp($state, [
                          "textInput3",
                          "value"
                        ])}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"frame109"}
              data-plasmic-override={overrides.frame109}
              className={classNames(projectcss.all, sty.frame109)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rYs2L
                )}
              >
                {"Stroke"}
              </div>
              <div
                data-plasmic-name={"frame110"}
                data-plasmic-override={overrides.frame110}
                className={classNames(projectcss.all, sty.frame110)}
              >
                <PropertiesTextfield
                  className={classNames(
                    "__wab_instance",
                    sty.propertiesTextfield___3N29Q
                  )}
                >
                  <Frame66Icon
                    className={classNames(projectcss.all, sty.svg__ys6A7)}
                    role={"img"}
                  />
                </PropertiesTextfield>
              </div>
              <PropertiesTextfield
                className={classNames(
                  "__wab_instance",
                  sty.propertiesTextfield__w3UsF
                )}
              >
                <div
                  data-plasmic-name={"rectangle7"}
                  data-plasmic-override={overrides.rectangle7}
                  className={classNames(projectcss.all, sty.rectangle7)}
                />
              </PropertiesTextfield>
            </div>
          </div>
          <div
            data-plasmic-name={"frame114"}
            data-plasmic-override={overrides.frame114}
            className={classNames(projectcss.all, sty.frame114)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1Q4Pu
              )}
            >
              {"Color"}
            </div>
            <PropertiesTextfield
              className={classNames(
                "__wab_instance",
                sty.propertiesTextfield___6BlHm
              )}
            >
              <div
                data-plasmic-name={"rectangle9"}
                data-plasmic-override={overrides.rectangle9}
                className={classNames(projectcss.all, sty.rectangle9)}
              />
            </PropertiesTextfield>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"rectangle6"}
        data-plasmic-override={overrides.rectangle6}
        className={classNames(projectcss.all, sty.rectangle6)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame149: [
    "frame149",
    "frame94",
    "frame95",
    "infoCircle2",
    "vuesaxOutlineInfoCircle2",
    "frame96",
    "frame105",
    "frame97",
    "frame104",
    "textInput6",
    "frame98",
    "frame99",
    "frame100",
    "textInput5",
    "frame101",
    "textInput2",
    "frame102",
    "frame103",
    "textInput4",
    "frame108",
    "textInput3",
    "frame109",
    "frame110",
    "rectangle7",
    "frame114",
    "rectangle9",
    "rectangle6"
  ],
  frame94: [
    "frame94",
    "frame95",
    "infoCircle2",
    "vuesaxOutlineInfoCircle2",
    "frame96",
    "frame105",
    "frame97",
    "frame104",
    "textInput6",
    "frame98",
    "frame99",
    "frame100",
    "textInput5",
    "frame101",
    "textInput2",
    "frame102",
    "frame103",
    "textInput4",
    "frame108",
    "textInput3",
    "frame109",
    "frame110",
    "rectangle7",
    "frame114",
    "rectangle9"
  ],
  frame95: ["frame95", "infoCircle2", "vuesaxOutlineInfoCircle2"],
  infoCircle2: ["infoCircle2", "vuesaxOutlineInfoCircle2"],
  vuesaxOutlineInfoCircle2: ["vuesaxOutlineInfoCircle2"],
  frame96: [
    "frame96",
    "frame105",
    "frame97",
    "frame104",
    "textInput6",
    "frame98",
    "frame99",
    "frame100",
    "textInput5",
    "frame101",
    "textInput2",
    "frame102",
    "frame103",
    "textInput4",
    "frame108",
    "textInput3",
    "frame109",
    "frame110",
    "rectangle7",
    "frame114",
    "rectangle9"
  ],
  frame105: [
    "frame105",
    "frame97",
    "frame104",
    "textInput6",
    "frame98",
    "frame99",
    "frame100",
    "textInput5",
    "frame101",
    "textInput2",
    "frame102",
    "frame103",
    "textInput4",
    "frame108",
    "textInput3",
    "frame109",
    "frame110",
    "rectangle7"
  ],
  frame97: [
    "frame97",
    "frame104",
    "textInput6",
    "frame98",
    "frame99",
    "frame100",
    "textInput5",
    "frame101",
    "textInput2",
    "frame102",
    "frame103",
    "textInput4",
    "frame108",
    "textInput3"
  ],
  frame104: [
    "frame104",
    "textInput6",
    "frame98",
    "frame99",
    "frame100",
    "textInput5",
    "frame101",
    "textInput2",
    "frame102",
    "frame103",
    "textInput4",
    "frame108",
    "textInput3"
  ],
  textInput6: ["textInput6"],
  frame98: [
    "frame98",
    "frame99",
    "frame100",
    "textInput5",
    "frame101",
    "textInput2",
    "frame102",
    "frame103",
    "textInput4",
    "frame108",
    "textInput3"
  ],
  frame99: ["frame99", "frame100", "textInput5", "frame101", "textInput2"],
  frame100: ["frame100", "textInput5"],
  textInput5: ["textInput5"],
  frame101: ["frame101", "textInput2"],
  textInput2: ["textInput2"],
  frame102: ["frame102", "frame103", "textInput4", "frame108", "textInput3"],
  frame103: ["frame103", "textInput4"],
  textInput4: ["textInput4"],
  frame108: ["frame108", "textInput3"],
  textInput3: ["textInput3"],
  frame109: ["frame109", "frame110", "rectangle7"],
  frame110: ["frame110"],
  rectangle7: ["rectangle7"],
  frame114: ["frame114", "rectangle9"],
  rectangle9: ["rectangle9"],
  rectangle6: ["rectangle6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame149: "div";
  frame94: "div";
  frame95: "div";
  infoCircle2: "div";
  vuesaxOutlineInfoCircle2: "div";
  frame96: "div";
  frame105: "div";
  frame97: "div";
  frame104: "div";
  textInput6: typeof TextInput;
  frame98: "div";
  frame99: "div";
  frame100: "div";
  textInput5: typeof TextInput;
  frame101: "div";
  textInput2: typeof TextInput;
  frame102: "div";
  frame103: "div";
  textInput4: typeof TextInput;
  frame108: "div";
  textInput3: typeof TextInput;
  frame109: "div";
  frame110: "div";
  rectangle7: "div";
  frame114: "div";
  rectangle9: "div";
  rectangle6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPropertiesAppearanceSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPropertiesAppearanceSection__VariantsArgs;
    args?: PlasmicPropertiesAppearanceSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicPropertiesAppearanceSection__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicPropertiesAppearanceSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPropertiesAppearanceSection__ArgProps,
          internalVariantPropNames:
            PlasmicPropertiesAppearanceSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPropertiesAppearanceSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame149") {
    func.displayName = "PlasmicPropertiesAppearanceSection";
  } else {
    func.displayName = `PlasmicPropertiesAppearanceSection.${nodeName}`;
  }
  return func;
}

export const PlasmicPropertiesAppearanceSection = Object.assign(
  // Top-level PlasmicPropertiesAppearanceSection renders the root element
  makeNodeComponent("frame149"),
  {
    // Helper components rendering sub-elements
    frame94: makeNodeComponent("frame94"),
    frame95: makeNodeComponent("frame95"),
    infoCircle2: makeNodeComponent("infoCircle2"),
    vuesaxOutlineInfoCircle2: makeNodeComponent("vuesaxOutlineInfoCircle2"),
    frame96: makeNodeComponent("frame96"),
    frame105: makeNodeComponent("frame105"),
    frame97: makeNodeComponent("frame97"),
    frame104: makeNodeComponent("frame104"),
    textInput6: makeNodeComponent("textInput6"),
    frame98: makeNodeComponent("frame98"),
    frame99: makeNodeComponent("frame99"),
    frame100: makeNodeComponent("frame100"),
    textInput5: makeNodeComponent("textInput5"),
    frame101: makeNodeComponent("frame101"),
    textInput2: makeNodeComponent("textInput2"),
    frame102: makeNodeComponent("frame102"),
    frame103: makeNodeComponent("frame103"),
    textInput4: makeNodeComponent("textInput4"),
    frame108: makeNodeComponent("frame108"),
    textInput3: makeNodeComponent("textInput3"),
    frame109: makeNodeComponent("frame109"),
    frame110: makeNodeComponent("frame110"),
    rectangle7: makeNodeComponent("rectangle7"),
    frame114: makeNodeComponent("frame114"),
    rectangle9: makeNodeComponent("rectangle9"),
    rectangle6: makeNodeComponent("rectangle6"),

    // Metadata about props expected for PlasmicPropertiesAppearanceSection
    internalVariantProps: PlasmicPropertiesAppearanceSection__VariantProps,
    internalArgProps: PlasmicPropertiesAppearanceSection__ArgProps
  }
);

export default PlasmicPropertiesAppearanceSection;
/* prettier-ignore-end */
