/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 14Poat1Xo2MFaa35ZoCnqd
// Component: snHIp0shhUpg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PropertiesTextfield from "../../PropertiesTextfield"; // plasmic-import: iS68sQYkDEs4/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectcss
import sty from "./PlasmicPropertiesLayoutSection.module.css"; // plasmic-import: snHIp0shhUpg/css

import InfoCircleIcon from "./icons/PlasmicIcon__InfoCircle"; // plasmic-import: 1xGEf6lNVKha/icon
import MaximizeIcon from "./icons/PlasmicIcon__Maximize"; // plasmic-import: O2on92b-bMla/icon
import MinWidthHeightSvgIcon from "./icons/PlasmicIcon__MinWidthHeightSvg"; // plasmic-import: wHK-4Tu35c0A/icon
import MaxWidthHeightSvgIcon from "./icons/PlasmicIcon__MaxWidthHeightSvg"; // plasmic-import: NrnmwF1XVuK9/icon
import Frame71Icon from "./icons/PlasmicIcon__Frame71"; // plasmic-import: L95fBnO8guLj/icon
import Frame72Icon from "./icons/PlasmicIcon__Frame72"; // plasmic-import: VbldlGv6vp97/icon
import Frame200SvgIcon from "./icons/PlasmicIcon__Frame200Svg"; // plasmic-import: 3QmHOrby9SS3/icon
import Frame70Icon from "./icons/PlasmicIcon__Frame70"; // plasmic-import: fmX1qYom8hWX/icon
import Frame73Icon from "./icons/PlasmicIcon__Frame73"; // plasmic-import: dUwZYrAcyy3m/icon
import Frame67Icon from "./icons/PlasmicIcon__Frame67"; // plasmic-import: 2DYoAq61KZ2c/icon
import DefaultExpansionSvgIcon from "./icons/PlasmicIcon__DefaultExpansionSvg"; // plasmic-import: zG2EMLXUU3hG/icon
import FlexibleSvgIcon from "./icons/PlasmicIcon__FlexibleSvg"; // plasmic-import: lDxvt_LJ-tMx/icon
import ExpandedSvgIcon from "./icons/PlasmicIcon__ExpandedSvg"; // plasmic-import: _Bg-60YPfpUy/icon
import EyeIcon from "./icons/PlasmicIcon__Eye"; // plasmic-import: sXEne5pTMqPk/icon

createPlasmicElementProxy;

export type PlasmicPropertiesLayoutSection__VariantMembers = {};
export type PlasmicPropertiesLayoutSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicPropertiesLayoutSection__VariantsArgs;
export const PlasmicPropertiesLayoutSection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPropertiesLayoutSection__ArgsType = {};
type ArgPropType = keyof PlasmicPropertiesLayoutSection__ArgsType;
export const PlasmicPropertiesLayoutSection__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPropertiesLayoutSection__OverridesType = {
  frame148?: Flex__<"div">;
  frame61?: Flex__<"div">;
  frame62?: Flex__<"div">;
  infoCircle?: Flex__<"div">;
  vuesaxOutlineInfoCircle?: Flex__<"div">;
  frame65?: Flex__<"div">;
  frame64?: Flex__<"div">;
  frame63?: Flex__<"div">;
  widthTextfield?: Flex__<typeof PropertiesTextfield>;
  frame67?: Flex__<"div">;
  heightTextfield?: Flex__<typeof PropertiesTextfield>;
  frame107?: Flex__<"div">;
  maximize?: Flex__<"div">;
  vuesaxOutlineMaximize?: Flex__<"div">;
  frame66?: Flex__<"div">;
  frame68?: Flex__<"div">;
  frame76?: Flex__<"div">;
  frame108?: Flex__<"div">;
  maximize2?: Flex__<"div">;
  vuesaxOutlineMaximize2?: Flex__<"div">;
  frame77?: Flex__<"div">;
  frame78?: Flex__<"div">;
  frame79?: Flex__<"div">;
  frame109?: Flex__<"div">;
  maximize3?: Flex__<"div">;
  vuesaxOutlineMaximize3?: Flex__<"div">;
  frame69?: Flex__<"div">;
  frame70?: Flex__<"div">;
  frame72?: Flex__<"div">;
  frame71?: Flex__<"div">;
  frame73?: Flex__<"div">;
  frame74?: Flex__<"div">;
  frame75?: Flex__<"div">;
  frame106?: Flex__<"div">;
  xAxisTextfield?: Flex__<typeof PropertiesTextfield>;
  yAxisTextfield?: Flex__<typeof PropertiesTextfield>;
  frame85?: Flex__<"div">;
  frame86?: Flex__<"div">;
  paddingLeftAndRightTextfield?: Flex__<typeof PropertiesTextfield>;
  paddingTopAndBottomTextfield?: Flex__<typeof PropertiesTextfield>;
  frame89?: Flex__<"div">;
  gapTextfield?: Flex__<typeof PropertiesTextfield>;
  frame135?: Flex__<"div">;
  frame91?: Flex__<"div">;
  frame136?: Flex__<"div">;
  frame92?: Flex__<"div">;
  flexTextfield?: Flex__<typeof PropertiesTextfield>;
  frame142?: Flex__<"div">;
  toggle?: Flex__<"div">;
  rectangle5?: Flex__<"div">;
};

export interface DefaultPropertiesLayoutSectionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPropertiesLayoutSection__RenderFunc(props: {
  variants: PlasmicPropertiesLayoutSection__VariantsArgs;
  args: PlasmicPropertiesLayoutSection__ArgsType;
  overrides: PlasmicPropertiesLayoutSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "openWidthHeightOptions",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame148"}
      data-plasmic-override={overrides.frame148}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame148
      )}
    >
      <div
        data-plasmic-name={"frame61"}
        data-plasmic-override={overrides.frame61}
        className={classNames(projectcss.all, sty.frame61)}
      >
        <div
          data-plasmic-name={"frame62"}
          data-plasmic-override={overrides.frame62}
          className={classNames(projectcss.all, sty.frame62)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3HHi6
            )}
          >
            {"Layout"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__eKvry)}>
            <div
              data-plasmic-name={"infoCircle"}
              data-plasmic-override={overrides.infoCircle}
              className={classNames(projectcss.all, sty.infoCircle)}
            >
              <div
                data-plasmic-name={"vuesaxOutlineInfoCircle"}
                data-plasmic-override={overrides.vuesaxOutlineInfoCircle}
                className={classNames(
                  projectcss.all,
                  sty.vuesaxOutlineInfoCircle
                )}
              >
                <InfoCircleIcon
                  className={classNames(projectcss.all, sty.svg__bfLwA)}
                  role={"img"}
                />
              </div>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"frame65"}
          data-plasmic-override={overrides.frame65}
          className={classNames(projectcss.all, sty.frame65)}
        >
          <div
            data-plasmic-name={"frame64"}
            data-plasmic-override={overrides.frame64}
            className={classNames(projectcss.all, sty.frame64)}
          >
            <div
              data-plasmic-name={"frame63"}
              data-plasmic-override={overrides.frame63}
              className={classNames(projectcss.all, sty.frame63)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3ZBK
                )}
              >
                {"Width"}
              </div>
              <PropertiesTextfield
                data-plasmic-name={"widthTextfield"}
                data-plasmic-override={overrides.widthTextfield}
                className={classNames("__wab_instance", sty.widthTextfield)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jtHne
                  )}
                >
                  {"W"}
                </div>
              </PropertiesTextfield>
            </div>
            <div
              data-plasmic-name={"frame67"}
              data-plasmic-override={overrides.frame67}
              className={classNames(projectcss.all, sty.frame67)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__h6S7G
                )}
              >
                {"Height"}
              </div>
              <PropertiesTextfield
                data-plasmic-name={"heightTextfield"}
                data-plasmic-override={overrides.heightTextfield}
                className={classNames("__wab_instance", sty.heightTextfield)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k1H1T
                  )}
                >
                  {"H"}
                </div>
              </PropertiesTextfield>
            </div>
            <div
              data-plasmic-name={"frame107"}
              data-plasmic-override={overrides.frame107}
              className={classNames(projectcss.all, sty.frame107)}
            >
              <div
                data-plasmic-name={"maximize"}
                data-plasmic-override={overrides.maximize}
                className={classNames(projectcss.all, sty.maximize)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateOpenWidthHeightOptions"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["openWidthHeightOptions"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateOpenWidthHeightOptions"] != null &&
                    typeof $steps["updateOpenWidthHeightOptions"] ===
                      "object" &&
                    typeof $steps["updateOpenWidthHeightOptions"].then ===
                      "function"
                  ) {
                    $steps["updateOpenWidthHeightOptions"] = await $steps[
                      "updateOpenWidthHeightOptions"
                    ];
                  }
                }}
              >
                <div
                  data-plasmic-name={"vuesaxOutlineMaximize"}
                  data-plasmic-override={overrides.vuesaxOutlineMaximize}
                  className={classNames(
                    projectcss.all,
                    sty.vuesaxOutlineMaximize
                  )}
                >
                  <MaximizeIcon
                    className={classNames(projectcss.all, sty.svg__jelmo)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
          </div>
          {(() => {
            try {
              return $state.openWidthHeightOptions;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__rDmY)}>
              <div
                data-plasmic-name={"frame66"}
                data-plasmic-override={overrides.frame66}
                className={classNames(projectcss.all, sty.frame66)}
              >
                <div
                  data-plasmic-name={"frame68"}
                  data-plasmic-override={overrides.frame68}
                  className={classNames(projectcss.all, sty.frame68)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rLwRf
                    )}
                  >
                    {"Min width"}
                  </div>
                  <PropertiesTextfield
                    className={classNames(
                      "__wab_instance",
                      sty.propertiesTextfield__o5ASw
                    )}
                  >
                    <MinWidthHeightSvgIcon
                      className={classNames(projectcss.all, sty.svg___11PTq)}
                      role={"img"}
                    />
                  </PropertiesTextfield>
                </div>
                <div
                  data-plasmic-name={"frame76"}
                  data-plasmic-override={overrides.frame76}
                  className={classNames(projectcss.all, sty.frame76)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__m0Vqs
                    )}
                  >
                    {"Min height"}
                  </div>
                  <PropertiesTextfield
                    className={classNames(
                      "__wab_instance",
                      sty.propertiesTextfield__p7D32
                    )}
                  >
                    <MinWidthHeightSvgIcon
                      className={classNames(projectcss.all, sty.svg___2LVvA)}
                      role={"img"}
                    />
                  </PropertiesTextfield>
                </div>
                <div
                  data-plasmic-name={"frame108"}
                  data-plasmic-override={overrides.frame108}
                  className={classNames(projectcss.all, sty.frame108)}
                >
                  <div
                    data-plasmic-name={"maximize2"}
                    data-plasmic-override={overrides.maximize2}
                    className={classNames(projectcss.all, sty.maximize2)}
                  >
                    <div
                      data-plasmic-name={"vuesaxOutlineMaximize2"}
                      data-plasmic-override={overrides.vuesaxOutlineMaximize2}
                      className={classNames(
                        projectcss.all,
                        sty.vuesaxOutlineMaximize2
                      )}
                    >
                      <MaximizeIcon
                        className={classNames(projectcss.all, sty.svg__n9Vk)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"frame77"}
                data-plasmic-override={overrides.frame77}
                className={classNames(projectcss.all, sty.frame77)}
              >
                <div
                  data-plasmic-name={"frame78"}
                  data-plasmic-override={overrides.frame78}
                  className={classNames(projectcss.all, sty.frame78)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pSCkH
                    )}
                  >
                    {"Max width"}
                  </div>
                  <PropertiesTextfield
                    className={classNames(
                      "__wab_instance",
                      sty.propertiesTextfield___5ItpQ
                    )}
                  >
                    <MaxWidthHeightSvgIcon
                      className={classNames(projectcss.all, sty.svg___1Hvhw)}
                      role={"img"}
                    />
                  </PropertiesTextfield>
                </div>
                <div
                  data-plasmic-name={"frame79"}
                  data-plasmic-override={overrides.frame79}
                  className={classNames(projectcss.all, sty.frame79)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Intk
                    )}
                  >
                    {"Max height"}
                  </div>
                  <PropertiesTextfield
                    className={classNames(
                      "__wab_instance",
                      sty.propertiesTextfield__btmI
                    )}
                  >
                    <MaxWidthHeightSvgIcon
                      className={classNames(projectcss.all, sty.svg__ha16)}
                      role={"img"}
                    />
                  </PropertiesTextfield>
                </div>
                <div
                  data-plasmic-name={"frame109"}
                  data-plasmic-override={overrides.frame109}
                  className={classNames(projectcss.all, sty.frame109)}
                >
                  <div
                    data-plasmic-name={"maximize3"}
                    data-plasmic-override={overrides.maximize3}
                    className={classNames(projectcss.all, sty.maximize3)}
                  >
                    <div
                      data-plasmic-name={"vuesaxOutlineMaximize3"}
                      data-plasmic-override={overrides.vuesaxOutlineMaximize3}
                      className={classNames(
                        projectcss.all,
                        sty.vuesaxOutlineMaximize3
                      )}
                    >
                      <MaximizeIcon
                        className={classNames(projectcss.all, sty.svg__bb81A)}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
          <div
            data-plasmic-name={"frame69"}
            data-plasmic-override={overrides.frame69}
            className={classNames(projectcss.all, sty.frame69)}
          >
            <div
              data-plasmic-name={"frame70"}
              data-plasmic-override={overrides.frame70}
              className={classNames(projectcss.all, sty.frame70)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1ZcXy
                )}
              >
                {"Alignment"}
              </div>
              <div
                data-plasmic-name={"frame72"}
                data-plasmic-override={overrides.frame72}
                className={classNames(projectcss.all, sty.frame72)}
              >
                <div
                  data-plasmic-name={"frame71"}
                  data-plasmic-override={overrides.frame71}
                  className={classNames(projectcss.all, sty.frame71)}
                >
                  <Frame71Icon
                    className={classNames(projectcss.all, sty.svg___2Pg5N)}
                    role={"img"}
                  />

                  <Frame72Icon
                    className={classNames(projectcss.all, sty.svg__q3CIe)}
                    role={"img"}
                  />

                  <Frame71Icon
                    className={classNames(projectcss.all, sty.svg__j8IPk)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"frame73"}
                  data-plasmic-override={overrides.frame73}
                  className={classNames(projectcss.all, sty.frame73)}
                >
                  <Frame71Icon
                    className={classNames(projectcss.all, sty.svg__nlHg4)}
                    role={"img"}
                  />

                  <Frame71Icon
                    className={classNames(projectcss.all, sty.svg__ob99U)}
                    role={"img"}
                  />

                  <Frame71Icon
                    className={classNames(projectcss.all, sty.svg__lt4Ow)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"frame74"}
                  data-plasmic-override={overrides.frame74}
                  className={classNames(projectcss.all, sty.frame74)}
                >
                  <Frame71Icon
                    className={classNames(projectcss.all, sty.svg__kXw2I)}
                    role={"img"}
                  />

                  <Frame71Icon
                    className={classNames(projectcss.all, sty.svg__dTXoU)}
                    role={"img"}
                  />

                  <Frame71Icon
                    className={classNames(projectcss.all, sty.svg__i3L5V)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"frame75"}
              data-plasmic-override={overrides.frame75}
              className={classNames(projectcss.all, sty.frame75)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oG6Ug
                )}
              >
                {"Axis"}
              </div>
              <div
                data-plasmic-name={"frame106"}
                data-plasmic-override={overrides.frame106}
                className={classNames(projectcss.all, sty.frame106)}
              >
                <PropertiesTextfield
                  data-plasmic-name={"xAxisTextfield"}
                  data-plasmic-override={overrides.xAxisTextfield}
                  className={classNames("__wab_instance", sty.xAxisTextfield)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kyARz
                    )}
                  >
                    {"X"}
                  </div>
                </PropertiesTextfield>
                <PropertiesTextfield
                  data-plasmic-name={"yAxisTextfield"}
                  data-plasmic-override={overrides.yAxisTextfield}
                  className={classNames("__wab_instance", sty.yAxisTextfield)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ycVrJ
                    )}
                  >
                    {"Y"}
                  </div>
                </PropertiesTextfield>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"frame85"}
            data-plasmic-override={overrides.frame85}
            className={classNames(projectcss.all, sty.frame85)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9FoAj
              )}
            >
              {"Padding"}
            </div>
            <div
              data-plasmic-name={"frame86"}
              data-plasmic-override={overrides.frame86}
              className={classNames(projectcss.all, sty.frame86)}
            >
              <PropertiesTextfield
                data-plasmic-name={"paddingLeftAndRightTextfield"}
                data-plasmic-override={overrides.paddingLeftAndRightTextfield}
                className={classNames(
                  "__wab_instance",
                  sty.paddingLeftAndRightTextfield
                )}
              >
                <Frame200SvgIcon
                  className={classNames(projectcss.all, sty.svg__bBI)}
                  role={"img"}
                />
              </PropertiesTextfield>
              <PropertiesTextfield
                data-plasmic-name={"paddingTopAndBottomTextfield"}
                data-plasmic-override={overrides.paddingTopAndBottomTextfield}
                className={classNames(
                  "__wab_instance",
                  sty.paddingTopAndBottomTextfield
                )}
              >
                <Frame70Icon
                  className={classNames(projectcss.all, sty.svg__bAfxZ)}
                  role={"img"}
                />
              </PropertiesTextfield>
              <Frame73Icon
                className={classNames(projectcss.all, sty.svg__llrMq)}
                role={"img"}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"frame89"}
            data-plasmic-override={overrides.frame89}
            className={classNames(projectcss.all, sty.frame89)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yuHig
              )}
            >
              {"Gap"}
            </div>
            <PropertiesTextfield
              data-plasmic-name={"gapTextfield"}
              data-plasmic-override={overrides.gapTextfield}
              className={classNames("__wab_instance", sty.gapTextfield)}
            >
              <Frame67Icon
                className={classNames(projectcss.all, sty.svg__fzcmc)}
                role={"img"}
              />
            </PropertiesTextfield>
          </div>
          <div
            data-plasmic-name={"frame135"}
            data-plasmic-override={overrides.frame135}
            className={classNames(projectcss.all, sty.frame135)}
          >
            <div
              data-plasmic-name={"frame91"}
              data-plasmic-override={overrides.frame91}
              className={classNames(projectcss.all, sty.frame91)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nvTlD
                )}
              >
                {"Expansion"}
              </div>
              <div
                data-plasmic-name={"frame136"}
                data-plasmic-override={overrides.frame136}
                className={classNames(projectcss.all, sty.frame136)}
              >
                <DefaultExpansionSvgIcon
                  className={classNames(projectcss.all, sty.svg__keQ4A)}
                  role={"img"}
                />

                <FlexibleSvgIcon
                  className={classNames(projectcss.all, sty.svg___9Rr88)}
                  role={"img"}
                />

                <ExpandedSvgIcon
                  className={classNames(projectcss.all, sty.svg__cicpq)}
                  role={"img"}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"frame92"}
              data-plasmic-override={overrides.frame92}
              className={classNames(projectcss.all, sty.frame92)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bxw07
                )}
              >
                {"Flex"}
              </div>
              <PropertiesTextfield
                data-plasmic-name={"flexTextfield"}
                data-plasmic-override={overrides.flexTextfield}
                className={classNames("__wab_instance", sty.flexTextfield)}
              >
                <EyeIcon
                  className={classNames(projectcss.all, sty.svg__tQs08)}
                  role={"img"}
                />
              </PropertiesTextfield>
            </div>
          </div>
          <div
            data-plasmic-name={"frame142"}
            data-plasmic-override={overrides.frame142}
            className={classNames(projectcss.all, sty.frame142)}
          >
            <div
              data-plasmic-name={"toggle"}
              data-plasmic-override={overrides.toggle}
              className={classNames(projectcss.all, sty.toggle)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eGu
              )}
            >
              {"Clip content"}
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"rectangle5"}
        data-plasmic-override={overrides.rectangle5}
        className={classNames(projectcss.all, sty.rectangle5)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame148: [
    "frame148",
    "frame61",
    "frame62",
    "infoCircle",
    "vuesaxOutlineInfoCircle",
    "frame65",
    "frame64",
    "frame63",
    "widthTextfield",
    "frame67",
    "heightTextfield",
    "frame107",
    "maximize",
    "vuesaxOutlineMaximize",
    "frame66",
    "frame68",
    "frame76",
    "frame108",
    "maximize2",
    "vuesaxOutlineMaximize2",
    "frame77",
    "frame78",
    "frame79",
    "frame109",
    "maximize3",
    "vuesaxOutlineMaximize3",
    "frame69",
    "frame70",
    "frame72",
    "frame71",
    "frame73",
    "frame74",
    "frame75",
    "frame106",
    "xAxisTextfield",
    "yAxisTextfield",
    "frame85",
    "frame86",
    "paddingLeftAndRightTextfield",
    "paddingTopAndBottomTextfield",
    "frame89",
    "gapTextfield",
    "frame135",
    "frame91",
    "frame136",
    "frame92",
    "flexTextfield",
    "frame142",
    "toggle",
    "rectangle5"
  ],
  frame61: [
    "frame61",
    "frame62",
    "infoCircle",
    "vuesaxOutlineInfoCircle",
    "frame65",
    "frame64",
    "frame63",
    "widthTextfield",
    "frame67",
    "heightTextfield",
    "frame107",
    "maximize",
    "vuesaxOutlineMaximize",
    "frame66",
    "frame68",
    "frame76",
    "frame108",
    "maximize2",
    "vuesaxOutlineMaximize2",
    "frame77",
    "frame78",
    "frame79",
    "frame109",
    "maximize3",
    "vuesaxOutlineMaximize3",
    "frame69",
    "frame70",
    "frame72",
    "frame71",
    "frame73",
    "frame74",
    "frame75",
    "frame106",
    "xAxisTextfield",
    "yAxisTextfield",
    "frame85",
    "frame86",
    "paddingLeftAndRightTextfield",
    "paddingTopAndBottomTextfield",
    "frame89",
    "gapTextfield",
    "frame135",
    "frame91",
    "frame136",
    "frame92",
    "flexTextfield",
    "frame142",
    "toggle"
  ],
  frame62: ["frame62", "infoCircle", "vuesaxOutlineInfoCircle"],
  infoCircle: ["infoCircle", "vuesaxOutlineInfoCircle"],
  vuesaxOutlineInfoCircle: ["vuesaxOutlineInfoCircle"],
  frame65: [
    "frame65",
    "frame64",
    "frame63",
    "widthTextfield",
    "frame67",
    "heightTextfield",
    "frame107",
    "maximize",
    "vuesaxOutlineMaximize",
    "frame66",
    "frame68",
    "frame76",
    "frame108",
    "maximize2",
    "vuesaxOutlineMaximize2",
    "frame77",
    "frame78",
    "frame79",
    "frame109",
    "maximize3",
    "vuesaxOutlineMaximize3",
    "frame69",
    "frame70",
    "frame72",
    "frame71",
    "frame73",
    "frame74",
    "frame75",
    "frame106",
    "xAxisTextfield",
    "yAxisTextfield",
    "frame85",
    "frame86",
    "paddingLeftAndRightTextfield",
    "paddingTopAndBottomTextfield",
    "frame89",
    "gapTextfield",
    "frame135",
    "frame91",
    "frame136",
    "frame92",
    "flexTextfield",
    "frame142",
    "toggle"
  ],
  frame64: [
    "frame64",
    "frame63",
    "widthTextfield",
    "frame67",
    "heightTextfield",
    "frame107",
    "maximize",
    "vuesaxOutlineMaximize"
  ],
  frame63: ["frame63", "widthTextfield"],
  widthTextfield: ["widthTextfield"],
  frame67: ["frame67", "heightTextfield"],
  heightTextfield: ["heightTextfield"],
  frame107: ["frame107", "maximize", "vuesaxOutlineMaximize"],
  maximize: ["maximize", "vuesaxOutlineMaximize"],
  vuesaxOutlineMaximize: ["vuesaxOutlineMaximize"],
  frame66: [
    "frame66",
    "frame68",
    "frame76",
    "frame108",
    "maximize2",
    "vuesaxOutlineMaximize2"
  ],
  frame68: ["frame68"],
  frame76: ["frame76"],
  frame108: ["frame108", "maximize2", "vuesaxOutlineMaximize2"],
  maximize2: ["maximize2", "vuesaxOutlineMaximize2"],
  vuesaxOutlineMaximize2: ["vuesaxOutlineMaximize2"],
  frame77: [
    "frame77",
    "frame78",
    "frame79",
    "frame109",
    "maximize3",
    "vuesaxOutlineMaximize3"
  ],
  frame78: ["frame78"],
  frame79: ["frame79"],
  frame109: ["frame109", "maximize3", "vuesaxOutlineMaximize3"],
  maximize3: ["maximize3", "vuesaxOutlineMaximize3"],
  vuesaxOutlineMaximize3: ["vuesaxOutlineMaximize3"],
  frame69: [
    "frame69",
    "frame70",
    "frame72",
    "frame71",
    "frame73",
    "frame74",
    "frame75",
    "frame106",
    "xAxisTextfield",
    "yAxisTextfield"
  ],
  frame70: ["frame70", "frame72", "frame71", "frame73", "frame74"],
  frame72: ["frame72", "frame71", "frame73", "frame74"],
  frame71: ["frame71"],
  frame73: ["frame73"],
  frame74: ["frame74"],
  frame75: ["frame75", "frame106", "xAxisTextfield", "yAxisTextfield"],
  frame106: ["frame106", "xAxisTextfield", "yAxisTextfield"],
  xAxisTextfield: ["xAxisTextfield"],
  yAxisTextfield: ["yAxisTextfield"],
  frame85: [
    "frame85",
    "frame86",
    "paddingLeftAndRightTextfield",
    "paddingTopAndBottomTextfield"
  ],
  frame86: [
    "frame86",
    "paddingLeftAndRightTextfield",
    "paddingTopAndBottomTextfield"
  ],
  paddingLeftAndRightTextfield: ["paddingLeftAndRightTextfield"],
  paddingTopAndBottomTextfield: ["paddingTopAndBottomTextfield"],
  frame89: ["frame89", "gapTextfield"],
  gapTextfield: ["gapTextfield"],
  frame135: ["frame135", "frame91", "frame136", "frame92", "flexTextfield"],
  frame91: ["frame91", "frame136"],
  frame136: ["frame136"],
  frame92: ["frame92", "flexTextfield"],
  flexTextfield: ["flexTextfield"],
  frame142: ["frame142", "toggle"],
  toggle: ["toggle"],
  rectangle5: ["rectangle5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame148: "div";
  frame61: "div";
  frame62: "div";
  infoCircle: "div";
  vuesaxOutlineInfoCircle: "div";
  frame65: "div";
  frame64: "div";
  frame63: "div";
  widthTextfield: typeof PropertiesTextfield;
  frame67: "div";
  heightTextfield: typeof PropertiesTextfield;
  frame107: "div";
  maximize: "div";
  vuesaxOutlineMaximize: "div";
  frame66: "div";
  frame68: "div";
  frame76: "div";
  frame108: "div";
  maximize2: "div";
  vuesaxOutlineMaximize2: "div";
  frame77: "div";
  frame78: "div";
  frame79: "div";
  frame109: "div";
  maximize3: "div";
  vuesaxOutlineMaximize3: "div";
  frame69: "div";
  frame70: "div";
  frame72: "div";
  frame71: "div";
  frame73: "div";
  frame74: "div";
  frame75: "div";
  frame106: "div";
  xAxisTextfield: typeof PropertiesTextfield;
  yAxisTextfield: typeof PropertiesTextfield;
  frame85: "div";
  frame86: "div";
  paddingLeftAndRightTextfield: typeof PropertiesTextfield;
  paddingTopAndBottomTextfield: typeof PropertiesTextfield;
  frame89: "div";
  gapTextfield: typeof PropertiesTextfield;
  frame135: "div";
  frame91: "div";
  frame136: "div";
  frame92: "div";
  flexTextfield: typeof PropertiesTextfield;
  frame142: "div";
  toggle: "div";
  rectangle5: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPropertiesLayoutSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPropertiesLayoutSection__VariantsArgs;
    args?: PlasmicPropertiesLayoutSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPropertiesLayoutSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPropertiesLayoutSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPropertiesLayoutSection__ArgProps,
          internalVariantPropNames: PlasmicPropertiesLayoutSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPropertiesLayoutSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame148") {
    func.displayName = "PlasmicPropertiesLayoutSection";
  } else {
    func.displayName = `PlasmicPropertiesLayoutSection.${nodeName}`;
  }
  return func;
}

export const PlasmicPropertiesLayoutSection = Object.assign(
  // Top-level PlasmicPropertiesLayoutSection renders the root element
  makeNodeComponent("frame148"),
  {
    // Helper components rendering sub-elements
    frame61: makeNodeComponent("frame61"),
    frame62: makeNodeComponent("frame62"),
    infoCircle: makeNodeComponent("infoCircle"),
    vuesaxOutlineInfoCircle: makeNodeComponent("vuesaxOutlineInfoCircle"),
    frame65: makeNodeComponent("frame65"),
    frame64: makeNodeComponent("frame64"),
    frame63: makeNodeComponent("frame63"),
    widthTextfield: makeNodeComponent("widthTextfield"),
    frame67: makeNodeComponent("frame67"),
    heightTextfield: makeNodeComponent("heightTextfield"),
    frame107: makeNodeComponent("frame107"),
    maximize: makeNodeComponent("maximize"),
    vuesaxOutlineMaximize: makeNodeComponent("vuesaxOutlineMaximize"),
    frame66: makeNodeComponent("frame66"),
    frame68: makeNodeComponent("frame68"),
    frame76: makeNodeComponent("frame76"),
    frame108: makeNodeComponent("frame108"),
    maximize2: makeNodeComponent("maximize2"),
    vuesaxOutlineMaximize2: makeNodeComponent("vuesaxOutlineMaximize2"),
    frame77: makeNodeComponent("frame77"),
    frame78: makeNodeComponent("frame78"),
    frame79: makeNodeComponent("frame79"),
    frame109: makeNodeComponent("frame109"),
    maximize3: makeNodeComponent("maximize3"),
    vuesaxOutlineMaximize3: makeNodeComponent("vuesaxOutlineMaximize3"),
    frame69: makeNodeComponent("frame69"),
    frame70: makeNodeComponent("frame70"),
    frame72: makeNodeComponent("frame72"),
    frame71: makeNodeComponent("frame71"),
    frame73: makeNodeComponent("frame73"),
    frame74: makeNodeComponent("frame74"),
    frame75: makeNodeComponent("frame75"),
    frame106: makeNodeComponent("frame106"),
    xAxisTextfield: makeNodeComponent("xAxisTextfield"),
    yAxisTextfield: makeNodeComponent("yAxisTextfield"),
    frame85: makeNodeComponent("frame85"),
    frame86: makeNodeComponent("frame86"),
    paddingLeftAndRightTextfield: makeNodeComponent(
      "paddingLeftAndRightTextfield"
    ),
    paddingTopAndBottomTextfield: makeNodeComponent(
      "paddingTopAndBottomTextfield"
    ),
    frame89: makeNodeComponent("frame89"),
    gapTextfield: makeNodeComponent("gapTextfield"),
    frame135: makeNodeComponent("frame135"),
    frame91: makeNodeComponent("frame91"),
    frame136: makeNodeComponent("frame136"),
    frame92: makeNodeComponent("frame92"),
    flexTextfield: makeNodeComponent("flexTextfield"),
    frame142: makeNodeComponent("frame142"),
    toggle: makeNodeComponent("toggle"),
    rectangle5: makeNodeComponent("rectangle5"),

    // Metadata about props expected for PlasmicPropertiesLayoutSection
    internalVariantProps: PlasmicPropertiesLayoutSection__VariantProps,
    internalArgProps: PlasmicPropertiesLayoutSection__ArgProps
  }
);

export default PlasmicPropertiesLayoutSection;
/* prettier-ignore-end */
