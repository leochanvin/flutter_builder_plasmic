/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 14Poat1Xo2MFaa35ZoCnqd
// Component: pvtNa1_sMQiD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: fNeSTvGFB_H6/component
import WidgetItem from "../../WidgetItem"; // plasmic-import: YTeucjJNpOif/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectcss
import sty from "./PlasmicAddWidgetSelection.module.css"; // plasmic-import: pvtNa1_sMQiD/css

import SidebarLeft2Icon from "./icons/PlasmicIcon__SidebarLeft2"; // plasmic-import: slf1P2N2Q4hY/icon
import SearchNormal2Icon from "./icons/PlasmicIcon__SearchNormal2"; // plasmic-import: 46gOz3Om8bFj/icon
import Maximize4Icon from "./icons/PlasmicIcon__Maximize4"; // plasmic-import: XkcTvfkiKzEl/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: g4hMjP43HGnx/icon
import Frame21Icon from "./icons/PlasmicIcon__Frame21"; // plasmic-import: fgJFPSnfJdgx/icon
import RowVerticalIcon from "./icons/PlasmicIcon__RowVertical"; // plasmic-import: L56iOpBPHWm3/icon

createPlasmicElementProxy;

export type PlasmicAddWidgetSelection__VariantMembers = {};
export type PlasmicAddWidgetSelection__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddWidgetSelection__VariantsArgs;
export const PlasmicAddWidgetSelection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAddWidgetSelection__ArgsType = {
  selectWidget?: (selectedWidget: any) => void;
};
type ArgPropType = keyof PlasmicAddWidgetSelection__ArgsType;
export const PlasmicAddWidgetSelection__ArgProps = new Array<ArgPropType>(
  "selectWidget"
);

export type PlasmicAddWidgetSelection__OverridesType = {
  frame127?: Flex__<"div">;
  frame112?: Flex__<"div">;
  frame113?: Flex__<"div">;
  rectangle7?: Flex__<"div">;
  frame114?: Flex__<"div">;
  frame115?: Flex__<"div">;
  rectangle11?: Flex__<"div">;
  rectangle12?: Flex__<"div">;
  frame124?: Flex__<"div">;
  frame118?: Flex__<"div">;
  sidebarLeft2?: Flex__<"div">;
  vuesaxOutlineSidebarLeft2?: Flex__<"div">;
  frame128?: Flex__<"div">;
  textfield2?: Flex__<"div">;
  searchNormal2?: Flex__<"div">;
  vuesaxOutlineSearchNormal2?: Flex__<"div">;
  textInput3?: Flex__<typeof TextInput>;
  maximize42?: Flex__<"div">;
  vuesaxOutlineMaximize42?: Flex__<"div">;
  rectangle8?: Flex__<"div">;
  frame132?: Flex__<"div">;
  frame134?: Flex__<"div">;
  widgetItem?: Flex__<typeof WidgetItem>;
};

export interface DefaultAddWidgetSelectionProps {
  selectWidget?: (selectedWidget: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddWidgetSelection__RenderFunc(props: {
  variants: PlasmicAddWidgetSelection__VariantsArgs;
  args: PlasmicAddWidgetSelection__ArgsType;
  overrides: PlasmicAddWidgetSelection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame127"}
      data-plasmic-override={overrides.frame127}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame127
      )}
    >
      <div
        data-plasmic-name={"frame112"}
        data-plasmic-override={overrides.frame112}
        className={classNames(projectcss.all, sty.frame112)}
      >
        <div
          data-plasmic-name={"frame113"}
          data-plasmic-override={overrides.frame113}
          className={classNames(projectcss.all, sty.frame113)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f0U4
            )}
          >
            {"Widgets"}
          </div>
        </div>
        <div
          data-plasmic-name={"rectangle7"}
          data-plasmic-override={overrides.rectangle7}
          className={classNames(projectcss.all, sty.rectangle7)}
        />

        <div
          data-plasmic-name={"frame114"}
          data-plasmic-override={overrides.frame114}
          className={classNames(projectcss.all, sty.frame114)}
        >
          <div
            data-plasmic-name={"frame115"}
            data-plasmic-override={overrides.frame115}
            className={classNames(projectcss.all, sty.frame115)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__l0C3C
              )}
            >
              {"Components"}
            </div>
          </div>
          <div
            data-plasmic-name={"rectangle11"}
            data-plasmic-override={overrides.rectangle11}
            className={classNames(projectcss.all, sty.rectangle11)}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"rectangle12"}
        data-plasmic-override={overrides.rectangle12}
        className={classNames(projectcss.all, sty.rectangle12)}
      />

      <div
        data-plasmic-name={"frame124"}
        data-plasmic-override={overrides.frame124}
        className={classNames(projectcss.all, sty.frame124)}
      >
        <div
          data-plasmic-name={"frame118"}
          data-plasmic-override={overrides.frame118}
          className={classNames(projectcss.all, sty.frame118)}
        >
          <div
            data-plasmic-name={"sidebarLeft2"}
            data-plasmic-override={overrides.sidebarLeft2}
            className={classNames(projectcss.all, sty.sidebarLeft2)}
          >
            <div
              data-plasmic-name={"vuesaxOutlineSidebarLeft2"}
              data-plasmic-override={overrides.vuesaxOutlineSidebarLeft2}
              className={classNames(
                projectcss.all,
                sty.vuesaxOutlineSidebarLeft2
              )}
            >
              <SidebarLeft2Icon
                className={classNames(projectcss.all, sty.svg__h0IFe)}
                role={"img"}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"frame128"}
            data-plasmic-override={overrides.frame128}
            className={classNames(projectcss.all, sty.frame128)}
          >
            <div
              data-plasmic-name={"textfield2"}
              data-plasmic-override={overrides.textfield2}
              className={classNames(projectcss.all, sty.textfield2)}
            >
              <div
                data-plasmic-name={"searchNormal2"}
                data-plasmic-override={overrides.searchNormal2}
                className={classNames(projectcss.all, sty.searchNormal2)}
              >
                <div
                  data-plasmic-name={"vuesaxOutlineSearchNormal2"}
                  data-plasmic-override={overrides.vuesaxOutlineSearchNormal2}
                  className={classNames(
                    projectcss.all,
                    sty.vuesaxOutlineSearchNormal2
                  )}
                >
                  <SearchNormal2Icon
                    className={classNames(projectcss.all, sty.svg__atXf)}
                    role={"img"}
                  />
                </div>
              </div>
              <TextInput
                data-plasmic-name={"textInput3"}
                data-plasmic-override={overrides.textInput3}
                className={classNames("__wab_instance", sty.textInput3)}
                inputMode={"numeric"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "textInput3",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={"Search"}
                property={true}
                readOnly={(() => {
                  try {
                    return $props.readOnly;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                value={generateStateValueProp($state, ["textInput3", "value"])}
              />
            </div>
            <div
              data-plasmic-name={"maximize42"}
              data-plasmic-override={overrides.maximize42}
              className={classNames(projectcss.all, sty.maximize42)}
            >
              <div
                data-plasmic-name={"vuesaxOutlineMaximize42"}
                data-plasmic-override={overrides.vuesaxOutlineMaximize42}
                className={classNames(
                  projectcss.all,
                  sty.vuesaxOutlineMaximize42
                )}
              >
                <Maximize4Icon
                  className={classNames(projectcss.all, sty.svg__iCx5)}
                  role={"img"}
                />
              </div>
            </div>
            <XIcon
              className={classNames(projectcss.all, sty.svg__sj5Sn)}
              role={"img"}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"rectangle8"}
          data-plasmic-override={overrides.rectangle8}
          className={classNames(projectcss.all, sty.rectangle8)}
        />

        <div
          data-plasmic-name={"frame132"}
          data-plasmic-override={overrides.frame132}
          className={classNames(projectcss.all, sty.frame132)}
        >
          <div
            data-plasmic-name={"frame134"}
            data-plasmic-override={overrides.frame134}
            className={classNames(projectcss.all, sty.frame134)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yetQe
              )}
            >
              {"Commonly used"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__heGnq)}>
              <Frame21Icon
                className={classNames(projectcss.all, sty.svg__vVuIl)}
                role={"img"}
              />
            </div>
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return [
                  {
                    uid: "text-001",
                    type: "Text",
                    icon_path: "icons/text.png",
                    props: {
                      text: "Calendrier",
                      visibility: {
                        conditional: false,
                        responsive: {
                          phone: true,
                          tablet: true,
                          desktop: true
                        },
                        opacity: 1.0,
                        animatedOpacity: false
                      },
                      layout: {
                        expansion: "none",
                        flex: 1,
                        padding: { l: 0, t: 0, r: 0, b: 0 },
                        alignment: { slot: "center", x: 0, y: 0 }
                      },
                      textProps: {
                        themeTextStyle: null,
                        fontFamily: "Primary Family",
                        fontWeight: "w500",
                        fontSize: 24.0,
                        textColor: { role: "primaryText", hex: null },
                        lineHeight: null,
                        letterSpacing: null,
                        textAlign: "start",
                        maxLines: null,
                        autoSize: false,
                        selectable: false,
                        shadows: [],
                        gradient: null,
                        animateChanges: false
                      }
                    }
                  },
                  {
                    uid: "row-001",
                    type: "Row",
                    icon_path: "icons/row.png",
                    props: {
                      visibility: {
                        conditional: false,
                        responsive: {
                          phone: true,
                          tablet: true,
                          desktop: true
                        },
                        opacity: 1.0,
                        animatedOpacity: false
                      },
                      layout: {
                        expansion: "none",
                        flex: 1,
                        padding: { l: 0, t: 0, r: 0, b: 0 },
                        alignment: { slot: "center", x: 0, y: 0 }
                      },
                      rowProps: {
                        mainAxisSize: "min",
                        mainAxisAlignment: "start",
                        crossAxisAlignment: "center",
                        scrollable: false,
                        itemsSpacing: 8.0,
                        applySpacingToStartEnd: false,
                        startSpacing: 0.0,
                        endSpacing: 0.0
                      }
                    },
                    children: []
                  },
                  {
                    uid: "column-001",
                    type: "Column",
                    icon_path: "icons/column.png",
                    props: {
                      visibility: {
                        conditional: false,
                        responsive: {
                          phone: true,
                          tablet: true,
                          desktop: true
                        },
                        opacity: 1.0,
                        animatedOpacity: false
                      },
                      layout: {
                        expansion: "none",
                        flex: 1,
                        padding: { l: 0, t: 0, r: 0, b: 0 },
                        alignment: { slot: "center", x: 0, y: 0 }
                      },
                      columnProps: {
                        mainAxisSize: "min",
                        mainAxisAlignment: "start",
                        crossAxisAlignment: "center",
                        scrollable: false,
                        itemsSpacing: 0.0,
                        applySpacingToStartEnd: false,
                        startSpacing: 0.0,
                        endSpacing: 0.0
                      }
                    },
                    children: []
                  },
                  {
                    uid: "container-001",
                    type: "Container",
                    icon_path: "icons/container.png",
                    props: {
                      visibility: {
                        conditional: false,
                        responsive: {
                          phone: true,
                          tablet: true,
                          desktop: true
                        },
                        opacity: 1.0,
                        animatedOpacity: false
                      },
                      layout: {
                        expansion: "none",
                        flex: 4,
                        padding: { l: 0, t: 0, r: 0, b: 0 },
                        alignment: { slot: "center", x: 0, y: 0 }
                      },
                      containerProps: {
                        size: {
                          width: { value: "inf", unit: "px" },
                          height: { value: "inf", unit: "px" }
                        },
                        minSize: {
                          w: { value: 0, unit: "px" },
                          h: { value: 0, unit: "px" }
                        },
                        maxSize: {
                          w: { value: "inf", unit: "px" },
                          h: { value: "inf", unit: "px" }
                        },
                        fill: { role: "primaryBackground", hex: null },
                        borderColor: { hex: null, unset: true },
                        borderRadius: {
                          linked: false,
                          tl: 0,
                          tr: 0,
                          br: 0,
                          bl: 0
                        },
                        borderWidth: 0,
                        elevation: 0,
                        clipContent: false,
                        boxShadow: { enabled: false, presets: [], custom: [] },
                        gradient: null,
                        backgroundImage: null,
                        childAlignment: { slot: "center", x: 0, y: 0 },
                        implicitAnimated: false,
                        safeArea: false
                      }
                    },
                    child: null
                  }
                ];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentWidget = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__syyYc)}
                key={currentIndex}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___0FjYy)}
                >
                  <WidgetItem
                    data-plasmic-name={"widgetItem"}
                    data-plasmic-override={overrides.widgetItem}
                    className={classNames("__wab_instance", sty.widgetItem)}
                    name={currentWidget}
                  />
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame127: [
    "frame127",
    "frame112",
    "frame113",
    "rectangle7",
    "frame114",
    "frame115",
    "rectangle11",
    "rectangle12",
    "frame124",
    "frame118",
    "sidebarLeft2",
    "vuesaxOutlineSidebarLeft2",
    "frame128",
    "textfield2",
    "searchNormal2",
    "vuesaxOutlineSearchNormal2",
    "textInput3",
    "maximize42",
    "vuesaxOutlineMaximize42",
    "rectangle8",
    "frame132",
    "frame134",
    "widgetItem"
  ],
  frame112: [
    "frame112",
    "frame113",
    "rectangle7",
    "frame114",
    "frame115",
    "rectangle11"
  ],
  frame113: ["frame113"],
  rectangle7: ["rectangle7"],
  frame114: ["frame114", "frame115", "rectangle11"],
  frame115: ["frame115"],
  rectangle11: ["rectangle11"],
  rectangle12: ["rectangle12"],
  frame124: [
    "frame124",
    "frame118",
    "sidebarLeft2",
    "vuesaxOutlineSidebarLeft2",
    "frame128",
    "textfield2",
    "searchNormal2",
    "vuesaxOutlineSearchNormal2",
    "textInput3",
    "maximize42",
    "vuesaxOutlineMaximize42",
    "rectangle8",
    "frame132",
    "frame134",
    "widgetItem"
  ],
  frame118: [
    "frame118",
    "sidebarLeft2",
    "vuesaxOutlineSidebarLeft2",
    "frame128",
    "textfield2",
    "searchNormal2",
    "vuesaxOutlineSearchNormal2",
    "textInput3",
    "maximize42",
    "vuesaxOutlineMaximize42"
  ],
  sidebarLeft2: ["sidebarLeft2", "vuesaxOutlineSidebarLeft2"],
  vuesaxOutlineSidebarLeft2: ["vuesaxOutlineSidebarLeft2"],
  frame128: [
    "frame128",
    "textfield2",
    "searchNormal2",
    "vuesaxOutlineSearchNormal2",
    "textInput3",
    "maximize42",
    "vuesaxOutlineMaximize42"
  ],
  textfield2: [
    "textfield2",
    "searchNormal2",
    "vuesaxOutlineSearchNormal2",
    "textInput3"
  ],
  searchNormal2: ["searchNormal2", "vuesaxOutlineSearchNormal2"],
  vuesaxOutlineSearchNormal2: ["vuesaxOutlineSearchNormal2"],
  textInput3: ["textInput3"],
  maximize42: ["maximize42", "vuesaxOutlineMaximize42"],
  vuesaxOutlineMaximize42: ["vuesaxOutlineMaximize42"],
  rectangle8: ["rectangle8"],
  frame132: ["frame132", "frame134", "widgetItem"],
  frame134: ["frame134"],
  widgetItem: ["widgetItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame127: "div";
  frame112: "div";
  frame113: "div";
  rectangle7: "div";
  frame114: "div";
  frame115: "div";
  rectangle11: "div";
  rectangle12: "div";
  frame124: "div";
  frame118: "div";
  sidebarLeft2: "div";
  vuesaxOutlineSidebarLeft2: "div";
  frame128: "div";
  textfield2: "div";
  searchNormal2: "div";
  vuesaxOutlineSearchNormal2: "div";
  textInput3: typeof TextInput;
  maximize42: "div";
  vuesaxOutlineMaximize42: "div";
  rectangle8: "div";
  frame132: "div";
  frame134: "div";
  widgetItem: typeof WidgetItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddWidgetSelection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddWidgetSelection__VariantsArgs;
    args?: PlasmicAddWidgetSelection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddWidgetSelection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAddWidgetSelection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddWidgetSelection__ArgProps,
          internalVariantPropNames: PlasmicAddWidgetSelection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddWidgetSelection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame127") {
    func.displayName = "PlasmicAddWidgetSelection";
  } else {
    func.displayName = `PlasmicAddWidgetSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicAddWidgetSelection = Object.assign(
  // Top-level PlasmicAddWidgetSelection renders the root element
  makeNodeComponent("frame127"),
  {
    // Helper components rendering sub-elements
    frame112: makeNodeComponent("frame112"),
    frame113: makeNodeComponent("frame113"),
    rectangle7: makeNodeComponent("rectangle7"),
    frame114: makeNodeComponent("frame114"),
    frame115: makeNodeComponent("frame115"),
    rectangle11: makeNodeComponent("rectangle11"),
    rectangle12: makeNodeComponent("rectangle12"),
    frame124: makeNodeComponent("frame124"),
    frame118: makeNodeComponent("frame118"),
    sidebarLeft2: makeNodeComponent("sidebarLeft2"),
    vuesaxOutlineSidebarLeft2: makeNodeComponent("vuesaxOutlineSidebarLeft2"),
    frame128: makeNodeComponent("frame128"),
    textfield2: makeNodeComponent("textfield2"),
    searchNormal2: makeNodeComponent("searchNormal2"),
    vuesaxOutlineSearchNormal2: makeNodeComponent("vuesaxOutlineSearchNormal2"),
    textInput3: makeNodeComponent("textInput3"),
    maximize42: makeNodeComponent("maximize42"),
    vuesaxOutlineMaximize42: makeNodeComponent("vuesaxOutlineMaximize42"),
    rectangle8: makeNodeComponent("rectangle8"),
    frame132: makeNodeComponent("frame132"),
    frame134: makeNodeComponent("frame134"),
    widgetItem: makeNodeComponent("widgetItem"),

    // Metadata about props expected for PlasmicAddWidgetSelection
    internalVariantProps: PlasmicAddWidgetSelection__VariantProps,
    internalArgProps: PlasmicAddWidgetSelection__ArgProps
  }
);

export default PlasmicAddWidgetSelection;
/* prettier-ignore-end */
