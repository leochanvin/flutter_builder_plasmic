/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 14Poat1Xo2MFaa35ZoCnqd
// Component: 4uVmaOMPkJzP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import IconButton from "../../IconButton"; // plasmic-import: 6lDIF369LXXt/component
import TextInput from "../../TextInput"; // plasmic-import: fNeSTvGFB_H6/component
import SelectButton from "../../SelectButton"; // plasmic-import: DPg0ApQ_34Tf/component
import SelectPageButton from "../../SelectPageButton"; // plasmic-import: wgw_IZFUuC2U/component
import IconButtonSelectProperty from "../../IconButtonSelectProperty"; // plasmic-import: 1T_9MyAFtbND/component
import PropertiesVisibilitySection from "../../PropertiesVisibilitySection"; // plasmic-import: BIrfUEblpERf/component
import PropertiesLayoutSection from "../../PropertiesLayoutSection"; // plasmic-import: snHIp0shhUpg/component
import PropertiesAppearanceSection from "../../PropertiesAppearanceSection"; // plasmic-import: J20s0U7K-z1T/component
import PropertiesTextSection from "../../PropertiesTextSection"; // plasmic-import: w5E5J13JYc7t/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectcss
import sty from "./PlasmicEditorPage.module.css"; // plasmic-import: 4uVmaOMPkJzP/css

import FlutterLogoSvgIcon from "./icons/PlasmicIcon__FlutterLogoSvg"; // plasmic-import: wv1Sfzk4wcbB/icon
import AdditemSvgIcon from "./icons/PlasmicIcon__AdditemSvg"; // plasmic-import: hlINFESFGFYX/icon
import LayerSvgIcon from "./icons/PlasmicIcon__LayerSvg"; // plasmic-import: caclyyljkkHl/icon
import Grid1SvgIcon from "./icons/PlasmicIcon__Grid1Svg"; // plasmic-import: 4ZBAVrfYsOPW/icon
import DriverIcon from "./icons/PlasmicIcon__Driver"; // plasmic-import: uPTr_22U4DZB/icon
import ProgrammingArrowsSvgIcon from "./icons/PlasmicIcon__ProgrammingArrowsSvg"; // plasmic-import: nzKYPxUqU_GY/icon
import FolderOpenSvgIcon from "./icons/PlasmicIcon__FolderOpenSvg"; // plasmic-import: aol3vUpekla2/icon
import GalleryIcon from "./icons/PlasmicIcon__Gallery"; // plasmic-import: Q6djqQjnpNhO/icon
import BrushIcon from "./icons/PlasmicIcon__Brush"; // plasmic-import: wCHNHyTidWxE/icon
import GithubAltSvgrepoCom1Icon from "./icons/PlasmicIcon__GithubAltSvgrepoCom1"; // plasmic-import: vHe45W_eJyZl/icon
import Firebase1Icon from "./icons/PlasmicIcon__Firebase1"; // plasmic-import: CKMwzJE1Cpe2/icon
import Setting2Icon from "./icons/PlasmicIcon__Setting2"; // plasmic-import: 89dyH9w9YqPy/icon
import SidebarLeftIcon from "./icons/PlasmicIcon__SidebarLeft"; // plasmic-import: 33tkUsgvZnao/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: _knAJuId6YYv/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: Y9stZjaD1AZn/icon
import SearchNormalIcon from "./icons/PlasmicIcon__SearchNormal"; // plasmic-import: fc-pN7nXLrIF/icon
import Plus1512SvgrepoComSvgIcon from "./icons/PlasmicIcon__Plus1512SvgrepoComSvg"; // plasmic-import: fu4dAXU-Gy_l/icon
import DocumentCodeIcon from "./icons/PlasmicIcon__DocumentCode"; // plasmic-import: Y1drDpHMtTwe/icon
import PlayIcon from "./icons/PlasmicIcon__Play"; // plasmic-import: SV13G6O40jAh/icon
import RulerPenIcon from "./icons/PlasmicIcon__RulerPen"; // plasmic-import: fH_8Hol_CL60/icon
import FlashIcon from "./icons/PlasmicIcon__Flash"; // plasmic-import: AgZq5Wfc4mlx/icon

createPlasmicElementProxy;

export type PlasmicEditorPage__VariantMembers = {};
export type PlasmicEditorPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditorPage__VariantsArgs;
export const PlasmicEditorPage__VariantProps = new Array<VariantPropType>();

export type PlasmicEditorPage__ArgsType = { layersTree?: React.ReactNode };
type ArgPropType = keyof PlasmicEditorPage__ArgsType;
export const PlasmicEditorPage__ArgProps = new Array<ArgPropType>("layersTree");

export type PlasmicEditorPage__OverridesType = {
  root?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  selectPageButton?: Flex__<typeof SelectPageButton>;
  frame125?: Flex__<"div">;
  frame147?: Flex__<"div">;
  frame82?: Flex__<"div">;
  rectangle4?: Flex__<"div">;
  frame154?: Flex__<"div">;
  propertiesVisibilitySection?: Flex__<typeof PropertiesVisibilitySection>;
  propertiesLayoutSection?: Flex__<typeof PropertiesLayoutSection>;
  propertiesAppearanceSection?: Flex__<typeof PropertiesAppearanceSection>;
  propertiesTextSection?: Flex__<typeof PropertiesTextSection>;
  frame155?: Flex__<"div">;
  frame156?: Flex__<"div">;
  frame157?: Flex__<"div">;
  plusMath?: Flex__<"div">;
  rectangle12?: Flex__<"div">;
  frame158?: Flex__<"div">;
  frame159?: Flex__<"div">;
  frame160?: Flex__<"div">;
  plusMath2?: Flex__<"div">;
  rectangle13?: Flex__<"div">;
  frame161?: Flex__<"div">;
  frame162?: Flex__<"div">;
  frame163?: Flex__<"div">;
  plusMath3?: Flex__<"div">;
  rectangle14?: Flex__<"div">;
};

export interface DefaultEditorPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditorPage__RenderFunc(props: {
  variants: PlasmicEditorPage__VariantsArgs;
  args: PlasmicEditorPage__ArgsType;
  overrides: PlasmicEditorPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "builderOrCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "builder"
      },
      {
        path: "propertiesTab",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "edit"
      },
      {
        path: "scaffold",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          uid: "abc123",
          name: "Scaffold",
          type: "Scaffold",
          props: {
            visibility: { opacity: 1, animatedOpacity: false },
            scaffoldProps: {
              backgroundColor: { role: "secondaryBackground", hex: null },
              safeArea: false,
              hideKeyboardOnTap: true,
              disableAndroidBackButton: false,
              disableResizeToAvoidBottomInset: false
            },
            navBarProps: { showOnNavBar: false, alwaysShowOnPage: false }
          },
          children: {
            appBar: null,
            body: {
              uid: "abc123",
              type: "Column",
              props: {
                visibility: {
                  conditional: false,
                  responsive: { phone: true, tablet: true, desktop: true },
                  opacity: 1,
                  animatedOpacity: false
                },
                layout: {
                  expansion: "none",
                  flex: 1,
                  padding: { l: 0, t: 0, r: 0, b: 0 },
                  alignment: { slot: "center", x: 0, y: 0 }
                },
                columnProps: {
                  mainAxisSize: "min",
                  mainAxisAlignment: "start",
                  crossAxisAlignment: "center",
                  scrollable: false,
                  itemsSpacing: 0,
                  applySpacingToStartEnd: false,
                  startSpacing: 0,
                  endSpacing: 0
                }
              },
              children: []
            },
            floatingActionButton: null,
            bottomNavigationBar: null,
            drawer: null
          }
        })
      },
      {
        path: "currentWidgetUid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__rxeBm)}>
          <div className={classNames(projectcss.all, sty.freeBox__jPtQt)}>
            <div className={classNames(projectcss.all, sty.freeBox__dLtKp)}>
              <div className={classNames(projectcss.all, sty.freeBox__nYbT)}>
                <FlutterLogoSvgIcon
                  className={classNames(projectcss.all, sty.svg__vkVl4)}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__nWnRt)} />

              <div className={classNames(projectcss.all, sty.freeBox__vchc4)}>
                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton___9PiXr
                  )}
                  iconSelected={
                    <AdditemSvgIcon
                      className={classNames(projectcss.all, sty.svg__n3GL)}
                      role={"img"}
                    />
                  }
                />

                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton__rr8Wh
                  )}
                  iconSelected={
                    <LayerSvgIcon
                      className={classNames(projectcss.all, sty.svg__zYb48)}
                      role={"img"}
                    />
                  }
                />

                <IconButton
                  className={classNames("__wab_instance", sty.iconButton__k5Ku)}
                  iconSelected={
                    <Grid1SvgIcon
                      className={classNames(projectcss.all, sty.svg__cjFp3)}
                      role={"img"}
                    />
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__lJyx4)} />

              <div className={classNames(projectcss.all, sty.freeBox__jyUlJ)}>
                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton__ntJYg
                  )}
                  iconSelected={
                    <DriverIcon
                      className={classNames(projectcss.all, sty.svg___7QzWf)}
                      role={"img"}
                    />
                  }
                />

                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton__xunq6
                  )}
                  iconSelected={
                    <ProgrammingArrowsSvgIcon
                      className={classNames(projectcss.all, sty.svg__mYhga)}
                      role={"img"}
                    />
                  }
                />

                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton__uYagg
                  )}
                  iconSelected={
                    <FolderOpenSvgIcon
                      className={classNames(projectcss.all, sty.svg__k47Vb)}
                      role={"img"}
                    />
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__swsc2)} />

              <div className={classNames(projectcss.all, sty.freeBox__vi0B4)}>
                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton__m7EpV
                  )}
                  iconSelected={
                    <GalleryIcon
                      className={classNames(projectcss.all, sty.svg__zz4Sp)}
                      role={"img"}
                    />
                  }
                />

                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton__l8RBv
                  )}
                  iconSelected={
                    <BrushIcon
                      className={classNames(projectcss.all, sty.svg__hDyfu)}
                      role={"img"}
                    />
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wnuxZ)} />

              <div className={classNames(projectcss.all, sty.freeBox__orqLd)}>
                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton___3GiXo
                  )}
                  iconSelected={
                    <GithubAltSvgrepoCom1Icon
                      className={classNames(projectcss.all, sty.svg__pyss6)}
                      role={"img"}
                    />
                  }
                />

                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton__eBt9M
                  )}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vhVKh)} />

              <div className={classNames(projectcss.all, sty.freeBox__th5Oz)}>
                <IconButton
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton__nhoml
                  )}
                  iconSelected={
                    <Setting2Icon
                      className={classNames(projectcss.all, sty.svg__huIjI)}
                      role={"img"}
                    />
                  }
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__yeJVj)} />

            <div className={classNames(projectcss.all, sty.freeBox___5GbBa)}>
              <div className={classNames(projectcss.all, sty.freeBox___0PlQ9)}>
                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  ariaLabel={``}
                  className={classNames("__wab_instance", sty.textInput)}
                  inputType={"text"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "textInput",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={"Project Name"}
                  value={generateStateValueProp($state, ["textInput", "value"])}
                />

                <SidebarLeftIcon
                  className={classNames(projectcss.all, sty.svg__o87C)}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__t6J4L)} />

              <div className={classNames(projectcss.all, sty.freeBox__bapkO)}>
                <div className={classNames(projectcss.all, sty.freeBox__d2X8A)}>
                  <SelectButton
                    className={classNames(
                      "__wab_instance",
                      sty.selectButton__pvwdQ
                    )}
                    disabled={false}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xZaWc
                        )}
                      >
                        {"Builder"}
                      </div>
                    }
                  />

                  <SelectButton
                    className={classNames(
                      "__wab_instance",
                      sty.selectButton__cFqop
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u8PzO
                        )}
                      >
                        {"Code"}
                      </div>
                    }
                  />
                </div>
                <SearchNormalIcon
                  className={classNames(projectcss.all, sty.svg__vxue7)}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kcIMu)} />

              <div className={classNames(projectcss.all, sty.freeBox__a61Jz)}>
                <div className={classNames(projectcss.all, sty.freeBox___6TXn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bNzVx
                    )}
                  >
                    {"Pages"}
                  </div>
                  <Plus1512SvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__ma5Ip)}
                    role={"img"}
                  />
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
                  2, 3, 4
                ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rUJuJ)}
                      key={currentIndex}
                    >
                      <SelectPageButton
                        data-plasmic-name={"selectPageButton"}
                        data-plasmic-override={overrides.selectPageButton}
                        className={classNames(
                          "__wab_instance",
                          sty.selectPageButton
                        )}
                      />
                    </div>
                  );
                })}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jIotd)} />

              <div
                className={classNames(projectcss.all, sty.freeBox__ma1HS)}
                style={{
                  height: "${Number(state.LayersHeight)}px !important",
                  overflow: "auto"
                }}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rvGsw)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zCsHi
                    )}
                  >
                    {"Layers"}
                  </div>
                </div>
                {renderPlasmicSlot({
                  defaultContents: null,
                  value: args.layersTree
                })}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"frame125"}
            data-plasmic-override={overrides.frame125}
            className={classNames(projectcss.all, sty.frame125)}
          >
            <div
              data-plasmic-name={"frame147"}
              data-plasmic-override={overrides.frame147}
              className={classNames(projectcss.all, sty.frame147)}
            >
              <div
                data-plasmic-name={"frame82"}
                data-plasmic-override={overrides.frame82}
                className={classNames(projectcss.all, sty.frame82)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__nWwqd)}>
                  <IconButton
                    className={classNames(
                      "__wab_instance",
                      sty.iconButton__i18E2
                    )}
                    iconSelected={
                      <DocumentCodeIcon
                        className={classNames(projectcss.all, sty.svg__i82VQ)}
                        role={"img"}
                      />
                    }
                    outlined={true}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__bALoa)}
                  >
                    <IconButton
                      className={classNames(
                        "__wab_instance",
                        sty.iconButton__vmCaZ
                      )}
                      iconSelected={
                        <PlayIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___3IK14
                          )}
                          role={"img"}
                        />
                      }
                      outlined={true}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__i0Yf3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g3Oon
                        )}
                      >
                        {"Publish"}
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wbIwq)}>
                  <IconButtonSelectProperty
                    className={classNames(
                      "__wab_instance",
                      sty.iconButtonSelectProperty___0CimE
                    )}
                    iconSelected={
                      <RulerPenIcon
                        className={classNames(projectcss.all, sty.svg__fU7I1)}
                        role={"img"}
                      />
                    }
                    onclick={async () => {
                      const $steps = {};

                      $steps["updatePropertiesTab"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["propertiesTab"]
                              },
                              operation: 0,
                              value: "edit"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePropertiesTab"] != null &&
                        typeof $steps["updatePropertiesTab"] === "object" &&
                        typeof $steps["updatePropertiesTab"].then === "function"
                      ) {
                        $steps["updatePropertiesTab"] = await $steps[
                          "updatePropertiesTab"
                        ];
                      }
                    }}
                    selected2={true}
                  />

                  <IconButtonSelectProperty
                    className={classNames(
                      "__wab_instance",
                      sty.iconButtonSelectProperty__zzab5
                    )}
                    iconSelected={
                      <FlashIcon
                        className={classNames(projectcss.all, sty.svg__eyG5J)}
                        role={"img"}
                      />
                    }
                  />

                  <IconButtonSelectProperty
                    className={classNames(
                      "__wab_instance",
                      sty.iconButtonSelectProperty__inQs
                    )}
                    iconSelected={
                      <DriverIcon
                        className={classNames(projectcss.all, sty.svg__r9MR)}
                        role={"img"}
                      />
                    }
                  />

                  <IconButtonSelectProperty
                    className={classNames(
                      "__wab_instance",
                      sty.iconButtonSelectProperty__rEkxz
                    )}
                    iconSelected={
                      <FolderOpenSvgIcon
                        className={classNames(projectcss.all, sty.svg___8DmBb)}
                        role={"img"}
                      />
                    }
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"rectangle4"}
                data-plasmic-override={overrides.rectangle4}
                className={classNames(projectcss.all, sty.rectangle4)}
              />
            </div>
            <div
              data-plasmic-name={"frame154"}
              data-plasmic-override={overrides.frame154}
              className={classNames(projectcss.all, sty.frame154)}
            >
              <PropertiesVisibilitySection
                data-plasmic-name={"propertiesVisibilitySection"}
                data-plasmic-override={overrides.propertiesVisibilitySection}
                className={classNames(
                  "__wab_instance",
                  sty.propertiesVisibilitySection
                )}
              />

              <PropertiesLayoutSection
                data-plasmic-name={"propertiesLayoutSection"}
                data-plasmic-override={overrides.propertiesLayoutSection}
                className={classNames(
                  "__wab_instance",
                  sty.propertiesLayoutSection
                )}
              />

              <PropertiesAppearanceSection
                data-plasmic-name={"propertiesAppearanceSection"}
                data-plasmic-override={overrides.propertiesAppearanceSection}
                className={classNames(
                  "__wab_instance",
                  sty.propertiesAppearanceSection
                )}
              />

              <PropertiesTextSection
                data-plasmic-name={"propertiesTextSection"}
                data-plasmic-override={overrides.propertiesTextSection}
                className={classNames(
                  "__wab_instance",
                  sty.propertiesTextSection
                )}
              />

              <div
                data-plasmic-name={"frame155"}
                data-plasmic-override={overrides.frame155}
                className={classNames(projectcss.all, sty.frame155)}
              >
                <div
                  data-plasmic-name={"frame156"}
                  data-plasmic-override={overrides.frame156}
                  className={classNames(projectcss.all, sty.frame156)}
                >
                  <div
                    data-plasmic-name={"frame157"}
                    data-plasmic-override={overrides.frame157}
                    className={classNames(projectcss.all, sty.frame157)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fqjbu
                      )}
                    >
                      {"Child"}
                    </div>
                    <div
                      data-plasmic-name={"plusMath"}
                      data-plasmic-override={overrides.plusMath}
                      className={classNames(projectcss.all, sty.plusMath)}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"rectangle12"}
                  data-plasmic-override={overrides.rectangle12}
                  className={classNames(projectcss.all, sty.rectangle12)}
                />
              </div>
              <div
                data-plasmic-name={"frame158"}
                data-plasmic-override={overrides.frame158}
                className={classNames(projectcss.all, sty.frame158)}
              >
                <div
                  data-plasmic-name={"frame159"}
                  data-plasmic-override={overrides.frame159}
                  className={classNames(projectcss.all, sty.frame159)}
                >
                  <div
                    data-plasmic-name={"frame160"}
                    data-plasmic-override={overrides.frame160}
                    className={classNames(projectcss.all, sty.frame160)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iv3Xt
                      )}
                    >
                      {"Animation"}
                    </div>
                    <div
                      data-plasmic-name={"plusMath2"}
                      data-plasmic-override={overrides.plusMath2}
                      className={classNames(projectcss.all, sty.plusMath2)}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"rectangle13"}
                  data-plasmic-override={overrides.rectangle13}
                  className={classNames(projectcss.all, sty.rectangle13)}
                />
              </div>
              <div
                data-plasmic-name={"frame161"}
                data-plasmic-override={overrides.frame161}
                className={classNames(projectcss.all, sty.frame161)}
              >
                <div
                  data-plasmic-name={"frame162"}
                  data-plasmic-override={overrides.frame162}
                  className={classNames(projectcss.all, sty.frame162)}
                >
                  <div
                    data-plasmic-name={"frame163"}
                    data-plasmic-override={overrides.frame163}
                    className={classNames(projectcss.all, sty.frame163)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nSAkH
                      )}
                    >
                      {"Shadow"}
                    </div>
                    <div
                      data-plasmic-name={"plusMath3"}
                      data-plasmic-override={overrides.plusMath3}
                      className={classNames(projectcss.all, sty.plusMath3)}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"rectangle14"}
                  data-plasmic-override={overrides.rectangle14}
                  className={classNames(projectcss.all, sty.rectangle14)}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "textInput",
    "selectPageButton",
    "frame125",
    "frame147",
    "frame82",
    "rectangle4",
    "frame154",
    "propertiesVisibilitySection",
    "propertiesLayoutSection",
    "propertiesAppearanceSection",
    "propertiesTextSection",
    "frame155",
    "frame156",
    "frame157",
    "plusMath",
    "rectangle12",
    "frame158",
    "frame159",
    "frame160",
    "plusMath2",
    "rectangle13",
    "frame161",
    "frame162",
    "frame163",
    "plusMath3",
    "rectangle14"
  ],
  textInput: ["textInput"],
  selectPageButton: ["selectPageButton"],
  frame125: [
    "frame125",
    "frame147",
    "frame82",
    "rectangle4",
    "frame154",
    "propertiesVisibilitySection",
    "propertiesLayoutSection",
    "propertiesAppearanceSection",
    "propertiesTextSection",
    "frame155",
    "frame156",
    "frame157",
    "plusMath",
    "rectangle12",
    "frame158",
    "frame159",
    "frame160",
    "plusMath2",
    "rectangle13",
    "frame161",
    "frame162",
    "frame163",
    "plusMath3",
    "rectangle14"
  ],
  frame147: ["frame147", "frame82", "rectangle4"],
  frame82: ["frame82"],
  rectangle4: ["rectangle4"],
  frame154: [
    "frame154",
    "propertiesVisibilitySection",
    "propertiesLayoutSection",
    "propertiesAppearanceSection",
    "propertiesTextSection",
    "frame155",
    "frame156",
    "frame157",
    "plusMath",
    "rectangle12",
    "frame158",
    "frame159",
    "frame160",
    "plusMath2",
    "rectangle13",
    "frame161",
    "frame162",
    "frame163",
    "plusMath3",
    "rectangle14"
  ],
  propertiesVisibilitySection: ["propertiesVisibilitySection"],
  propertiesLayoutSection: ["propertiesLayoutSection"],
  propertiesAppearanceSection: ["propertiesAppearanceSection"],
  propertiesTextSection: ["propertiesTextSection"],
  frame155: ["frame155", "frame156", "frame157", "plusMath", "rectangle12"],
  frame156: ["frame156", "frame157", "plusMath"],
  frame157: ["frame157", "plusMath"],
  plusMath: ["plusMath"],
  rectangle12: ["rectangle12"],
  frame158: ["frame158", "frame159", "frame160", "plusMath2", "rectangle13"],
  frame159: ["frame159", "frame160", "plusMath2"],
  frame160: ["frame160", "plusMath2"],
  plusMath2: ["plusMath2"],
  rectangle13: ["rectangle13"],
  frame161: ["frame161", "frame162", "frame163", "plusMath3", "rectangle14"],
  frame162: ["frame162", "frame163", "plusMath3"],
  frame163: ["frame163", "plusMath3"],
  plusMath3: ["plusMath3"],
  rectangle14: ["rectangle14"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput: typeof TextInput;
  selectPageButton: typeof SelectPageButton;
  frame125: "div";
  frame147: "div";
  frame82: "div";
  rectangle4: "div";
  frame154: "div";
  propertiesVisibilitySection: typeof PropertiesVisibilitySection;
  propertiesLayoutSection: typeof PropertiesLayoutSection;
  propertiesAppearanceSection: typeof PropertiesAppearanceSection;
  propertiesTextSection: typeof PropertiesTextSection;
  frame155: "div";
  frame156: "div";
  frame157: "div";
  plusMath: "div";
  rectangle12: "div";
  frame158: "div";
  frame159: "div";
  frame160: "div";
  plusMath2: "div";
  rectangle13: "div";
  frame161: "div";
  frame162: "div";
  frame163: "div";
  plusMath3: "div";
  rectangle14: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditorPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditorPage__VariantsArgs;
    args?: PlasmicEditorPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditorPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditorPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditorPage__ArgProps,
          internalVariantPropNames: PlasmicEditorPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditorPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditorPage";
  } else {
    func.displayName = `PlasmicEditorPage.${nodeName}`;
  }
  return func;
}

export const PlasmicEditorPage = Object.assign(
  // Top-level PlasmicEditorPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    selectPageButton: makeNodeComponent("selectPageButton"),
    frame125: makeNodeComponent("frame125"),
    frame147: makeNodeComponent("frame147"),
    frame82: makeNodeComponent("frame82"),
    rectangle4: makeNodeComponent("rectangle4"),
    frame154: makeNodeComponent("frame154"),
    propertiesVisibilitySection: makeNodeComponent(
      "propertiesVisibilitySection"
    ),
    propertiesLayoutSection: makeNodeComponent("propertiesLayoutSection"),
    propertiesAppearanceSection: makeNodeComponent(
      "propertiesAppearanceSection"
    ),
    propertiesTextSection: makeNodeComponent("propertiesTextSection"),
    frame155: makeNodeComponent("frame155"),
    frame156: makeNodeComponent("frame156"),
    frame157: makeNodeComponent("frame157"),
    plusMath: makeNodeComponent("plusMath"),
    rectangle12: makeNodeComponent("rectangle12"),
    frame158: makeNodeComponent("frame158"),
    frame159: makeNodeComponent("frame159"),
    frame160: makeNodeComponent("frame160"),
    plusMath2: makeNodeComponent("plusMath2"),
    rectangle13: makeNodeComponent("rectangle13"),
    frame161: makeNodeComponent("frame161"),
    frame162: makeNodeComponent("frame162"),
    frame163: makeNodeComponent("frame163"),
    plusMath3: makeNodeComponent("plusMath3"),
    rectangle14: makeNodeComponent("rectangle14"),

    // Metadata about props expected for PlasmicEditorPage
    internalVariantProps: PlasmicEditorPage__VariantProps,
    internalArgProps: PlasmicEditorPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditorPage;
/* prettier-ignore-end */
