/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 14Poat1Xo2MFaa35ZoCnqd
// Component: YTeucjJNpOif

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 14Poat1Xo2MFaa35ZoCnqd/projectcss
import sty from "./PlasmicWidgetItem.module.css"; // plasmic-import: YTeucjJNpOif/css

import RowVerticalIcon from "./icons/PlasmicIcon__RowVertical"; // plasmic-import: L56iOpBPHWm3/icon

createPlasmicElementProxy;

export type PlasmicWidgetItem__VariantMembers = {};
export type PlasmicWidgetItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicWidgetItem__VariantsArgs;
export const PlasmicWidgetItem__VariantProps = new Array<VariantPropType>();

export type PlasmicWidgetItem__ArgsType = {
  name?: any;
  children?: React.ReactNode;
  iconPath?: string;
};
type ArgPropType = keyof PlasmicWidgetItem__ArgsType;
export const PlasmicWidgetItem__ArgProps = new Array<ArgPropType>(
  "name",
  "children",
  "iconPath"
);

export type PlasmicWidgetItem__OverridesType = {
  frame43?: Flex__<"div">;
  frame161?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultWidgetItemProps {
  name?: any;
  children?: React.ReactNode;
  iconPath?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWidgetItem__RenderFunc(props: {
  variants: PlasmicWidgetItem__VariantsArgs;
  args: PlasmicWidgetItem__ArgsType;
  overrides: PlasmicWidgetItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"frame43"}
      data-plasmic-override={overrides.frame43}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame43
      )}
    >
      <div
        data-plasmic-name={"frame161"}
        data-plasmic-override={overrides.frame161}
        className={classNames(projectcss.all, sty.frame161)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <RowVerticalIcon
              className={classNames(projectcss.all, sty.svg___84TeH)}
              role={"img"}
            />
          ),

          value: args.children
        })}
      </div>
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.name.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Text";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame43: ["frame43", "frame161", "text"],
  frame161: ["frame161"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame43: "div";
  frame161: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWidgetItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWidgetItem__VariantsArgs;
    args?: PlasmicWidgetItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWidgetItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWidgetItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWidgetItem__ArgProps,
          internalVariantPropNames: PlasmicWidgetItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWidgetItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame43") {
    func.displayName = "PlasmicWidgetItem";
  } else {
    func.displayName = `PlasmicWidgetItem.${nodeName}`;
  }
  return func;
}

export const PlasmicWidgetItem = Object.assign(
  // Top-level PlasmicWidgetItem renders the root element
  makeNodeComponent("frame43"),
  {
    // Helper components rendering sub-elements
    frame161: makeNodeComponent("frame161"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicWidgetItem
    internalVariantProps: PlasmicWidgetItem__VariantProps,
    internalArgProps: PlasmicWidgetItem__ArgProps
  }
);

export default PlasmicWidgetItem;
/* prettier-ignore-end */
