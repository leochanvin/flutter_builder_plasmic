// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicPropertiesVisibilitySection,
  DefaultPropertiesVisibilitySectionProps
} from "./plasmic/flutter_builder/PlasmicPropertiesVisibilitySection";
import { HTMLElementRefOf } from "@plasmicapp/react-web";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface PropertiesVisibilitySectionProps extends Omit<DefaultPropertiesVisibilitySectionProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultPropertiesVisibilitySectionProps altogether and have
// total control over the props for your component.
export interface PropertiesVisibilitySectionProps
  extends DefaultPropertiesVisibilitySectionProps {
  node?: any;
  onUpdate?: (newProps: any) => void;
}

function PropertiesVisibilitySection_(
  props: PropertiesVisibilitySectionProps,
  ref: HTMLElementRefOf<"div">
) {
  const { node, onUpdate, ...rest } = props;
  
  // Extraire les propriétés de visibilité du nœud
  const visibility = node?.props?.visibility || {
    conditional: false,
    responsive: { phone: true, tablet: true, desktop: true },
    opacity: 1.0,
    animatedOpacity: false,
  };

  const handleOpacityChange = (value: number) => {
    if (onUpdate) {
      onUpdate({
        visibility: { ...visibility, opacity: value }
      });
    }
  };

  const handleAnimatedOpacityChange = (value: boolean) => {
    if (onUpdate) {
      onUpdate({
        visibility: { ...visibility, animatedOpacity: value }
      });
    }
  };

  const handleResponsiveChange = (device: 'phone' | 'tablet' | 'desktop', value: boolean) => {
    if (onUpdate) {
      onUpdate({
        visibility: { 
          ...visibility, 
          responsive: { 
            ...visibility.responsive, 
            [device]: value 
          } 
        }
      });
    }
  };

  return (
    <PlasmicPropertiesVisibilitySection 
      frame146={{ ref }} 
      {...rest}
      overrides={{
        // Vous pouvez ajouter des overrides ici pour connecter les contrôles
        // aux gestionnaires d'événements
      }}
    />
  );
}

const PropertiesVisibilitySection = React.forwardRef(
  PropertiesVisibilitySection_
);
export default PropertiesVisibilitySection;
