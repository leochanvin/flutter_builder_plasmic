// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicPropertiesTextSection,
  DefaultPropertiesTextSectionProps
} from "./plasmic/flutter_builder/PlasmicPropertiesTextSection";
import { HTMLElementRefOf } from "@plasmicapp/react-web";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface PropertiesTextSectionProps extends Omit<DefaultPropertiesTextSectionProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultPropertiesTextSectionProps altogether and have
// total control over the props for your component.
export interface PropertiesTextSectionProps
  extends DefaultPropertiesTextSectionProps {
  node?: any;
  onUpdate?: (newProps: any) => void;
}

function PropertiesTextSection_(
  props: PropertiesTextSectionProps,
  ref: HTMLElementRefOf<"div">
) {
  const { node, onUpdate, ...rest } = props;
  
  // Extraire les propriétés de texte du nœud
  const textProps = node?.props?.textProps || {
    themeTextStyle: null,
    fontFamily: "Primary Family",
    fontWeight: "w500",
    fontSize: 16.0,
    textColor: { role: "primaryText", hex: null },
    lineHeight: null,
    letterSpacing: null,
    textAlign: "start",
    maxLines: null,
    autoSize: false,
    selectable: false,
    shadows: [],
    gradient: null,
    animateChanges: false,
  };

  const text = node?.props?.text || "Text";

  const handleTextChange = (value: string) => {
    if (onUpdate) {
      onUpdate({ text: value });
    }
  };

  const handleFontSizeChange = (value: number) => {
    if (onUpdate) {
      onUpdate({
        textProps: { ...textProps, fontSize: value }
      });
    }
  };

  const handleFontWeightChange = (value: string) => {
    if (onUpdate) {
      onUpdate({
        textProps: { ...textProps, fontWeight: value }
      });
    }
  };

  const handleTextAlignChange = (value: "start" | "center" | "end" | "justify") => {
    if (onUpdate) {
      onUpdate({
        textProps: { ...textProps, textAlign: value }
      });
    }
  };

  const handleMaxLinesChange = (value: number | null) => {
    if (onUpdate) {
      onUpdate({
        textProps: { ...textProps, maxLines: value }
      });
    }
  };

  return (
    <PlasmicPropertiesTextSection 
      frame150={{ ref }} 
      {...rest}
      overrides={{
        // Vous pouvez ajouter des overrides ici pour connecter les contrôles
        // aux gestionnaires d'événements
      }}
    />
  );
}

const PropertiesTextSection = React.forwardRef(PropertiesTextSection_);
export default PropertiesTextSection;
